var searchIndex = JSON.parse('{\
"pliantdb":{"doc":"pliantdb (name not set in stone) is a programmable …","i":[[0,"connection","pliantdb","types for interacting with a database",null,null],[4,"Error","pliantdb::connection","an enumeration of errors that are <code>Connection</code>-related",null,null],[13,"Storage","","an error occurred interacting with the file-storage layer",0,null],[13,"CollectionNotFound","","an attempt to use a <code>Collection</code> with a <code>Database</code> that it …",0,null],[8,"Connection","","a trait that defines all interactions with a <code>Database</code>, …",null,null],[10,"collection","","access a collection for the connected <code>Database</code>",1,[[],[["collection",3],["error",4],["result",4]]]],[10,"insert","","insert a newly created document into the connected …",1,[[["document",3]],[["box",3],["pin",3]]]],[10,"update","","update an existing document in the connected <code>Database</code> for …",1,[[["document",3]],[["box",3],["pin",3]]]],[3,"Collection","","a struct used to interact with a collection over a …",null,null],[11,"push","","add a new <code>Document<Cl></code> with the contents <code>item</code>",2,[[]]],[11,"get","","retrieve a <code>Document<Cl></code> with <code>id</code> from the connection",2,[[["uuid",3]]]],[0,"schema","pliantdb","types for defining database schema",null,null],[0,"collection","pliantdb::schema","types for defining a <code>Collection</code>",null,null],[3,"Id","pliantdb::schema::collection","a unique collection id. Choose collection names that …",null,null],[12,"0","","",3,null],[8,"Collection","","a namespaced collection of <code>Document<Self></code> items and views",null,null],[10,"id","","the <code>Id</code> of this collection",4,[[],["id",3]]],[10,"define_views","","implementors define all of their <code>View</code>s in <code>schema</code>",4,[[["schema",3]]]],[0,"view","pliantdb::schema","types for defining map/reduce-powered <code>View</code>s",null,null],[0,"map","pliantdb::schema::view","types for defining a <code>Map</code> within a <code>View</code>",null,null],[3,"Map","pliantdb::schema::view::map","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",5,null],[12,"key","","the key used to index the View",5,null],[12,"value","","an associated value stored in the view",5,null],[11,"new","","creates a new Map entry for the document with id <code>source</code>",5,[[["uuid",3]]]],[3,"Serialized","","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",6,null],[12,"key","","the key used to index the View",6,null],[12,"value","","an associated value stored in the view",6,null],[8,"Key","","a trait that enables a type to convert itself to a …",null,null],[10,"to_endian_bytes","","convert <code>self</code> into an <code>IVec</code> containing bytes ordered in a …",7,[[],["ivec",3]]],[10,"from_endian_bytes","","convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",7,[[]]],[4,"Error","pliantdb::schema::view","errors that arise when interacting with views",null,null],[13,"SerializationError","","an error occurred while serializing or deserializing",8,null],[13,"ReduceUnimplemented","","returned when",8,null],[6,"MapResult","","a type alias for the result of <code>View::map()</code>",null,null],[8,"View","","a map/reduce powered indexing and aggregation schema",null,null],[16,"MapKey","","the key for this view. If you\'re using ranged queries, …",9,null],[16,"MapValue","","an associated type that can be stored with each entry in …",9,null],[16,"Reduce","","when implementing reduce(), this is the returned type",9,null],[10,"version","","the version of the view. Changing this value will cause …",9,[[]]],[10,"name","","the name of the view. Must be unique per collection.",9,[[],["cow",4]]],[10,"map","","the map function for this view. This function is …",9,[[["document",3]],["mapresult",6]]],[11,"reduce","","the reduce function for this view. If …",9,[[],[["result",4],["error",4]]]],[4,"SerializableValue","","an enum representing either an owned value or a borrowed …",null,null],[13,"Owned","","an owned value",10,null],[13,"Borrowed","","a borrowed value",10,null],[8,"Database","pliantdb::schema","a trait that defines a group of collections that are …",null,null],[10,"define_collections","","implementors must define their <code>Collection</code>s in <code>schema</code>",11,[[["schema",3]]]],[3,"Schema","","a collection of defined collections and views",null,null],[3,"Document","","a struct representing a document in the database",null,null],[12,"id","","the id of the Document. Unique across the collection <code>C</code>",12,null],[12,"revision","","the revision of the stored document.",12,null],[12,"contents","","the serialized bytes of the stored item",12,null],[3,"Revision","","a struct containing information about a <code>Document</code>\'s …",null,null],[12,"id","","The current revision id of the document. This value is …",13,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",13,null],[3,"Transaction","","a list of operations to execute as a single unit. If any …",null,null],[3,"Operation","","a single operation performed on a <code>Collection</code>",null,null],[12,"collection","","the id of the <code>Collection</code>",14,null],[12,"command","","the command being performed",14,null],[4,"Command","","a command to execute within a <code>Collection</code>",null,null],[13,"Insert","","insert a new document containing <code>contents</code>",15,null],[12,"contents","pliantdb::schema::Command","the initial contents of the document",16,null],[13,"Update","pliantdb::schema","update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",15,null],[12,"id","pliantdb::schema::Command","the id of the <code>Document</code>",17,null],[12,"revision","","the current <code>Revision</code> of the <code>Document</code>",17,null],[12,"contents","","the new contents to store within the <code>Document</code>",17,null],[3,"Executed","pliantdb::schema","details about an executed transaction",null,null],[12,"id","","the id of the transaction",18,null],[12,"changed_documents","","a list of containing ids of <code>Documents</code> changed",18,null],[3,"ChangedDocument","","a record of a changed",null,null],[12,"collection","","the id of the <code>Collection</code> of the changed <code>Document</code>",19,null],[12,"id","","the id of the changed <code>Document</code>",19,null],[0,"storage","pliantdb","types for interacting with a local, file-based database",null,null],[3,"Storage","pliantdb::storage","a local, file-based database",null,null],[11,"open_local","","opens a local file as a pliantdb",20,[[["asref",8],["path",3]],[["error",4],["result",4]]]],[4,"Error","pliantdb","an enumeration of errors that this crate can produce",null,null],[13,"Connection","","an error that occurred while interacting with a <code>Connection</code>",21,null],[13,"Serialization","","an error from serializing or deserializing from a <code>Document</code>",21,null],[11,"from","pliantdb::connection","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","pliantdb::schema::collection","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","pliantdb::schema","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"init","","",19,[[]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"drop","","",19,[[]]],[11,"from","pliantdb::schema::view::map","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","pliantdb::schema::view","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","pliantdb::storage","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"from","pliantdb","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"collection","pliantdb::storage","",20,[[],[["collection",3],["error",4],["result",4]]]],[11,"insert","","",20,[[["document",3]],[["box",3],["pin",3]]]],[11,"update","","",20,[[["document",3]],[["box",3],["pin",3]]]],[11,"as_ref","pliantdb::schema::view","",10,[[]]],[11,"from","pliantdb::connection","",0,[[["error",4]]]],[11,"from","pliantdb::schema::collection","",3,[[]]],[11,"from","","",3,[[["string",3]]]],[11,"from","pliantdb::schema::view","",8,[[["error",3]]]],[11,"from","","",10,[[],["serializablevalue",4]]],[11,"from","pliantdb","",21,[[["error",4]]]],[11,"from","","",21,[[["error",3]]]],[11,"from","","",21,[[["error",4]]]],[11,"clone","pliantdb::schema::collection","",3,[[],["id",3]]],[11,"clone","pliantdb::schema","",13,[[],["revision",3]]],[11,"clone","","",19,[[],["changeddocument",3]]],[11,"clone","pliantdb::storage","",20,[[],["storage",3]]],[11,"default","pliantdb::schema","",22,[[],["schema",3]]],[11,"default","","",23,[[],["transaction",3]]],[11,"eq","","",13,[[["revision",3]]]],[11,"ne","","",13,[[["revision",3]]]],[11,"eq","pliantdb::schema::view::map","",5,[[["map",3]]]],[11,"ne","","",5,[[["map",3]]]],[11,"fmt","pliantdb::connection","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::collection","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view::map","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view","",8,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb","",21,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::connection","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view","",8,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb","",21,[[["formatter",3]],["result",6]]],[11,"source","pliantdb::connection","",0,[[],[["option",4],["error",8]]]],[11,"source","pliantdb::schema::view","",8,[[],[["option",4],["error",8]]]],[11,"source","pliantdb","",21,[[],[["option",4],["error",8]]]],[11,"serialize","pliantdb::schema::collection","",3,[[],["result",4]]],[11,"serialize","pliantdb::schema","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"deserialize","pliantdb::schema::collection","",3,[[],["result",4]]],[11,"deserialize","pliantdb::schema","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"define_collection","","adds the collection <code>C</code> and its views",22,[[]]],[11,"define_view","","adds the view <code>V</code>",22,[[]]],[11,"contains","","returns true if this schema contains the collection <code>C</code>",22,[[]]],[11,"new","","create a new document with serialized bytes from <code>contents</code>",12,[[],[["result",4],["error",3]]]],[11,"contents","","retrieves <code>contents</code> through deserialization into the type <code>D</code>",12,[[],[["deserialize",8],["result",4],["error",3]]]],[11,"emit","","create a <code>Map</code> result with an empty key and value",12,[[],["map",3]]],[11,"emit_key","","create a <code>Map</code> result with a <code>key</code> and an empty value",12,[[["key",8]],[["key",8],["map",3]]]],[11,"emit_value","","create a <code>Map</code> result with <code>value</code> and an empty key",12,[[["serialize",8]],[["serialize",8],["map",3]]]],[11,"emit_key_and_value","","create a <code>Map</code> result with a <code>key</code> and <code>value</code>",12,[[["key",8],["serialize",8]],[["key",8],["serialize",8],["map",3]]]],[11,"new","","creates the first revision for a document with the SHA256 …",13,[[]]],[11,"next_revision","","creates the next revision in sequence with an updated …",13,[[],["option",4]]],[11,"push","","add an operation to the transaction",23,[[["operation",3]]]]],"p":[[4,"Error"],[8,"Connection"],[3,"Collection"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Document"],[3,"Revision"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[3,"Executed"],[3,"ChangedDocument"],[3,"Storage"],[4,"Error"],[3,"Schema"],[3,"Transaction"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
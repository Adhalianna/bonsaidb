var searchIndex = JSON.parse('{\
"pliantdb":{"doc":"A programmable document database inspired by <code>CouchDB</code> …","i":[[0,"connection","pliantdb::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb::core::connection","Defines all interactions with a [<code>schema::Database</code>], …",null,null],[10,"collection","","Accesses a collection for the connected [<code>schema::Database</code>]…",0,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected […",0,[[["vec",3],["global",3]],[["pin",3],["box",3]]]],[10,"update","","Updates an existing document in the connected […",0,[[["document",3]],[["box",3],["pin",3]]]],[10,"get","","Retrieves a stored document from [<code>Collection</code>] <code>C</code> …",0,[[],[["box",3],["pin",3]]]],[11,"view","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[],["view",3]]],[10,"query","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[["view",3]],[["pin",3],["box",3]]]],[10,"apply_transaction","","Applies a [<code>Transaction</code>] to the [<code>schema::Database</code>]. If any …",0,[[["transaction",3]],[["box",3],["pin",3]]]],[10,"list_executed_transactions","","Lists executed [<code>Transaction</code>]s from this [<code>schema::Database</code>]…",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[3,"View","","Parameters to query a <code>schema::View</code>.",null,null],[12,"key","","Key filtering criteria.",1,null],[4,"QueryKey","","Filters a [<code>View</code>] by key.",null,null],[13,"Matches","","Matches all entries with the key provided.",2,null],[13,"Range","","Matches all entires with keys in the range provided.",2,null],[13,"Multiple","","Matches all entries that have keys that are included in …",2,null],[0,"document","pliantdb::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",3,null],[12,"revision","","The revision of the stored document.",3,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",4,null],[12,"header","","The header of the document, which contains the id and …",4,null],[12,"contents","","The serialized bytes of the stored item.",4,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",5,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",5,null],[0,"schema","pliantdb::core","Types for defining database schema.",null,null],[0,"collection","pliantdb::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[0,"view","pliantdb::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",9,null],[12,"key","","The key used to index the View.",9,null],[12,"value","","An associated value stored in the view.",9,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[4,"Error","pliantdb::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["result",4],["error",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["option",4],["result",4],["error",4]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Map","pliantdb::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["result",4],["error",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",15,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["option",4],["result",4],["error",4]]]],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[0,"transaction","pliantdb::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",16,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",17,null],[12,"command","","The command being performed.",17,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",18,null],[12,"contents","pliantdb::core::transaction::Command","The initial contents of the document.",19,null],[13,"Update","pliantdb::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",18,null],[12,"header","pliantdb::core::transaction::Command","The current header of the <code>Document</code>.",20,null],[12,"contents","","The new contents to store within the <code>Document</code>.",20,null],[4,"OperationResult","pliantdb::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",21,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",21,null],[12,"collection","pliantdb::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",22,null],[12,"header","","The header of the updated <code>Document</code>.",22,null],[3,"Executed","pliantdb::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",23,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",23,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",24,null],[12,"id","","The id of the changed <code>Document</code>.",24,null],[4,"Error","pliantdb::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",25,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",25,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",25,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",25,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"Basic","pliantdb::core::test_util","",null,null],[12,"value","","",26,null],[12,"category","","",26,null],[12,"parent_id","","",26,null],[3,"BasicCount","","",null,null],[3,"BasicByParentId","","",null,null],[3,"BasicByCategory","","",null,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",27,null],[3,"BasicCollectionWithNoViews","","",null,null],[3,"UnassociatedCollection","","",null,null],[0,"config","pliantdb::local","Configuration options.",null,null],[3,"Configuration","pliantdb::local::config","Configuration options for [<code>Storage</code>].",null,null],[12,"workers","","Configuration options related to background tasks.",28,null],[12,"views","","Configuration options related to views.",28,null],[3,"Tasks","","Configujration options for background tasks.",null,null],[12,"worker_count","","Defines how many workers should be spawned to process …",29,null],[3,"Views","","Configuration options for views.",null,null],[12,"check_integrity_on_open","","If true, the database will scan all views during the call …",30,null],[0,"connection","pliantdb::local::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb::local::core::connection","Defines all interactions with a [<code>schema::Database</code>], …",null,null],[10,"collection","","Accesses a collection for the connected [<code>schema::Database</code>]…",0,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected […",0,[[["vec",3],["global",3]],[["pin",3],["box",3]]]],[10,"update","","Updates an existing document in the connected […",0,[[["document",3]],[["box",3],["pin",3]]]],[10,"get","","Retrieves a stored document from [<code>Collection</code>] <code>C</code> …",0,[[],[["box",3],["pin",3]]]],[11,"view","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[],["view",3]]],[10,"query","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[["view",3]],[["pin",3],["box",3]]]],[10,"apply_transaction","","Applies a [<code>Transaction</code>] to the [<code>schema::Database</code>]. If any …",0,[[["transaction",3]],[["box",3],["pin",3]]]],[10,"list_executed_transactions","","Lists executed [<code>Transaction</code>]s from this [<code>schema::Database</code>]…",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[3,"View","","Parameters to query a <code>schema::View</code>.",null,null],[12,"key","","Key filtering criteria.",1,null],[4,"QueryKey","","Filters a [<code>View</code>] by key.",null,null],[13,"Matches","","Matches all entries with the key provided.",2,null],[13,"Range","","Matches all entires with keys in the range provided.",2,null],[13,"Multiple","","Matches all entries that have keys that are included in …",2,null],[0,"document","pliantdb::local::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb::local::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",3,null],[12,"revision","","The revision of the stored document.",3,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",4,null],[12,"header","","The header of the document, which contains the id and …",4,null],[12,"contents","","The serialized bytes of the stored item.",4,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",5,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",5,null],[0,"schema","pliantdb::local::core","Types for defining database schema.",null,null],[0,"collection","pliantdb::local::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb::local::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[0,"view","pliantdb::local::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb::local::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb::local::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",9,null],[12,"key","","The key used to index the View.",9,null],[12,"value","","An associated value stored in the view.",9,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[4,"Error","pliantdb::local::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["result",4],["error",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["option",4],["result",4],["error",4]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Map","pliantdb::local::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["result",4],["error",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",15,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["error",3],["result",4],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["option",4],["result",4],["error",4]]]],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[0,"transaction","pliantdb::local::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb::local::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",16,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",17,null],[12,"command","","The command being performed.",17,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",18,null],[12,"contents","pliantdb::local::core::transaction::Command","The initial contents of the document.",19,null],[13,"Update","pliantdb::local::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",18,null],[12,"header","pliantdb::local::core::transaction::Command","The current header of the <code>Document</code>.",20,null],[12,"contents","","The new contents to store within the <code>Document</code>.",20,null],[4,"OperationResult","pliantdb::local::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",21,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",21,null],[12,"collection","pliantdb::local::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",22,null],[12,"header","","The header of the updated <code>Document</code>.",22,null],[3,"Executed","pliantdb::local::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",23,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",23,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",24,null],[12,"id","","The id of the changed <code>Document</code>.",24,null],[4,"Error","pliantdb::local::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",25,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",25,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",25,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",25,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"Basic","pliantdb::local::core::test_util","",null,null],[12,"value","","",26,null],[12,"category","","",26,null],[12,"parent_id","","",26,null],[3,"BasicCount","","",null,null],[3,"BasicByParentId","","",null,null],[3,"BasicByCategory","","",null,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",27,null],[3,"BasicCollectionWithNoViews","","",null,null],[3,"UnassociatedCollection","","",null,null],[3,"Configuration","pliantdb::local","Configuration options for [<code>Storage</code>].",null,null],[12,"workers","","Configuration options related to background tasks.",28,null],[12,"views","","Configuration options related to views.",28,null],[4,"Error","","Errors that can occur from interacting with storage.",null,null],[13,"Sled","","An error occurred interacting with <code>sled</code>.",31,null],[13,"InternalSerialization","","An error occurred serializing the underlying database …",31,null],[13,"Serialization","","An error occurred serializing the contents of a <code>Document</code> …",31,null],[13,"InternalCommunication","","An internal error occurred while waiting for a message.",31,null],[13,"View","","An internal error occurred while waiting for a message.",31,null],[3,"Storage","","A local, file-based database.",null,null],[17,"LIST_TRANSACTIONS_DEFAULT_RESULT_COUNT","","If no <code>result_limit</code> is specified, this value is the limit …",null,null],[17,"LIST_TRANSACTIONS_MAX_RESULTS","","The maximum number of results allowed to be returned from …",null,null],[11,"from","pliantdb::local::core::connection","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"init","","",32,[[]]],[11,"deref","","",32,[[]]],[11,"deref_mut","","",32,[[]]],[11,"drop","","",32,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","pliantdb::local::core::document","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","pliantdb::local::core::schema","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","pliantdb::local::core::schema::view::map","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","pliantdb::local::core::schema","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"from","pliantdb::local::core::transaction","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","pliantdb::local::core","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","pliantdb::local::core::test_util","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"define_collections","","",26,[[["schema",3]]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"collection","","",34,[[],["id",3]]],[11,"version","","",34,[[]]],[11,"name","","",34,[[],["cow",4]]],[11,"map","","",34,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"collection","","",35,[[],["id",3]]],[11,"version","","",35,[[]]],[11,"name","","",35,[[],["cow",4]]],[11,"map","","",35,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"init","","",35,[[]]],[11,"deref","","",35,[[]]],[11,"deref_mut","","",35,[[]]],[11,"drop","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"collection","","",36,[[],["id",3]]],[11,"version","","",36,[[]]],[11,"name","","",36,[[],["cow",4]]],[11,"map","","",36,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"init","","",36,[[]]],[11,"deref","","",36,[[]]],[11,"deref_mut","","",36,[[]]],[11,"drop","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"init","","",37,[[]]],[11,"deref","","",37,[[]]],[11,"deref_mut","","",37,[[]]],[11,"drop","","",37,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"define_collections","","",38,[[["schema",3]]]],[11,"init","","",38,[[]]],[11,"deref","","",38,[[]]],[11,"deref_mut","","",38,[[]]],[11,"drop","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"define_collections","","",39,[[["schema",3]]]],[11,"init","","",39,[[]]],[11,"deref","","",39,[[]]],[11,"deref_mut","","",39,[[]]],[11,"drop","","",39,[[]]],[11,"from","pliantdb::local","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","pliantdb::local::config","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"from","pliantdb::local","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"fmt","pliantdb::local::core::schema","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",6,[[],["id",3]]],[11,"from","","",11,[[["error",3]],["error",4]]],[11,"from","pliantdb::local::core","",25,[[["error",3]],["error",4]]],[11,"from","pliantdb::local::core::schema","",6,[[["string",3]],["id",3]]],[11,"from","","",13,[[],["serializablevalue",4]]],[11,"define_collections","pliantdb::local::core::test_util","",37,[[["schema",3]]]],[11,"as_ref","pliantdb::local::core::schema","",13,[[]]],[11,"as_ref","pliantdb::local::core::test_util","",27,[[],["path",3]]],[11,"hash","pliantdb::local::core::schema","",6,[[]]],[11,"default","","",33,[[],["schema",3]]],[11,"default","pliantdb::local::core::transaction","",16,[[],["transaction",3]]],[11,"default","pliantdb::local::core::test_util","",26,[[],["basic",3]]],[11,"deserialize","pliantdb::local::core::transaction","",18,[[],[["result",4],["command",4]]]],[11,"deserialize","pliantdb::local::core::document","",4,[[],[["document",3],["result",4]]]],[11,"deserialize","","",5,[[],[["revision",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::transaction","",21,[[],[["operationresult",4],["result",4]]]],[11,"deserialize","pliantdb::local::core::schema::view::map","",9,[[],[["result",4],["serialized",3]]]],[11,"deserialize","pliantdb::local::core::transaction","",24,[[],[["result",4],["changeddocument",3]]]],[11,"deserialize","pliantdb::local::core::schema","",6,[[],[["id",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::test_util","",26,[[],[["basic",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::document","",3,[[],[["header",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::transaction","",23,[[],[["result",4],["executed",3]]]],[11,"source","pliantdb::local::core::schema","",11,[[],[["error",8],["option",4]]]],[11,"clone","pliantdb::local::core::document","",3,[[],["header",3]]],[11,"clone","pliantdb::local::core::schema","",6,[[],["id",3]]],[11,"clone","pliantdb::local::core::document","",5,[[],["revision",3]]],[11,"clone","pliantdb::local::core::transaction","",24,[[],["changeddocument",3]]],[11,"clone","pliantdb::local::core::schema::view::map","",9,[[],["serialized",3]]],[11,"eq","pliantdb::local::core::schema","",6,[[["id",3]]]],[11,"ne","","",6,[[["id",3]]]],[11,"eq","pliantdb::local::core::test_util","",26,[[["basic",3]]]],[11,"ne","","",26,[[["basic",3]]]],[11,"eq","pliantdb::local::core::document","",5,[[["revision",3]]]],[11,"ne","","",5,[[["revision",3]]]],[11,"eq","","",3,[[["header",3]]]],[11,"ne","","",3,[[["header",3]]]],[11,"eq","pliantdb::local::core::schema","",8,[[["map",3]]]],[11,"ne","","",8,[[["map",3]]]],[11,"id","pliantdb::local::core::test_util","",39,[[],["id",3]]],[11,"define_views","","",39,[[["schema",3]]]],[11,"id","","",38,[[],["id",3]]],[11,"define_views","","",38,[[["schema",3]]]],[11,"id","","",26,[[],["id",3]]],[11,"define_views","","",26,[[["schema",3]]]],[11,"fmt","","",38,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::test_util","",36,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",17,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::test_util","",35,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",34,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",39,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::test_util","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",33,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::test_util","",37,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema::view::map","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"version","pliantdb::local::core::test_util","",35,[[]]],[11,"name","","",35,[[],["cow",4]]],[11,"map","","",35,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","",35,[[],[["error",4],["result",4]]]],[11,"version","","",36,[[]]],[11,"name","","",36,[[],["cow",4]]],[11,"map","","",36,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","",36,[[],[["result",4],["error",4]]]],[11,"version","","",34,[[]]],[11,"name","","",34,[[],["cow",4]]],[11,"map","","",34,[[["document",3]],[["error",4],["option",4],["result",4]]]],[11,"reduce","","",34,[[],[["result",4],["error",4]]]],[11,"serialize","pliantdb::local::core::schema","",6,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",18,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","pliantdb::local::core::document","",5,[[],["result",4]]],[11,"serialize","pliantdb::local::core::test_util","",26,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",23,[[],["result",4]]],[11,"serialize","pliantdb::local::core::document","",4,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",21,[[],["result",4]]],[11,"serialize","pliantdb::local::core::schema::view::map","",9,[[],["result",4]]],[11,"drop","pliantdb::local::core::test_util","",27,[[]]],[11,"fmt","pliantdb::local","",31,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",31,[[["error",4]],["error",4]]],[11,"from","","",31,[[["error",4]],["error",4]]],[11,"from","","",31,[[["error",3]],["error",4]]],[11,"from","","",31,[[["errorkind",4],["global",3],["box",3]],["error",4]]],[11,"from","","",31,[[["recverror",4]],["error",4]]],[11,"collection","","",40,[[],[["error",4],["result",4],["collection",3]]]],[11,"insert","","",40,[[["vec",3],["global",3]],[["pin",3],["box",3]]]],[11,"update","","",40,[[["document",3]],[["box",3],["pin",3]]]],[11,"apply_transaction","","",40,[[["transaction",3]],[["box",3],["pin",3]]]],[11,"get","","",40,[[],[["box",3],["pin",3]]]],[11,"list_executed_transactions","","",40,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[11,"query","","",40,[[["storage",3],["view",3]],[["pin",3],["box",3]]]],[11,"default","pliantdb::local::config","",30,[[],["views",3]]],[11,"default","","",29,[[],["tasks",3]]],[11,"default","pliantdb::local","",28,[[],["configuration",3]]],[11,"source","","",31,[[],[["error",8],["option",4]]]],[11,"into","","",31,[[],["error",4]]],[11,"clone","","",40,[[],["storage",3]]],[11,"fmt","","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",40,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::config","",30,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local","",31,[[["formatter",3]],[["result",4],["error",3]]]],[11,"new","pliantdb::local::core::connection","Creates a new instance using <code>connection</code>.",32,[[],["collection",3]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",32,[[]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",32,[[]]],[11,"with_key","","Filters for entries in the view with <code>key</code>.",1,[[],["view",3]]],[11,"with_keys","","Filters for entries in the view with <code>keys</code>.",1,[[["global",3],["vec",3]],["view",3]]],[11,"with_key_range","","Filters for entries in the view with <code>keys</code>.",1,[[["range",3]],["view",3]]],[11,"query","","Executes the query and retrieves the results.",1,[[]]],[11,"new","pliantdb::local::core::document","Creates a new document with <code>contents</code>.",4,[[["id",3],["cow",4]],["document",3]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",4,[[["id",3]],[["result",4],["document",3],["error",3]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",4,[[],[["error",3],["result",4]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",4,[[],[["result",4],["error",3]]]],[11,"create_new_revision","","Creates a new revision.",4,[[["cow",4]],[["option",4],["document",3]]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",4,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",4,[[],["map",3]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",4,[[],["map",3]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",4,[[],["map",3]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",4,[[],["document",3]]],[11,"new","","Creates the first revision for a document with the SHA256 …",5,[[],["revision",3]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",5,[[],[["revision",3],["option",4]]]],[11,"new","pliantdb::local::core::schema","Creates a new Map entry for the document with id <code>source</code>.",8,[[],["map",3]]],[11,"define_collection","","Adds the collection <code>C</code> and its views.",33,[[]]],[11,"define_view","","Adds the view <code>V</code>.",33,[[]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",33,[[]]],[11,"view_by_name","","Looks up a [<code>view::Serialized</code>] by name.",33,[[],[["option",4],["serialized",8]]]],[11,"view","","Looks up a [<code>view::Serialized</code>] through the the type <code>V</code>.",33,[[],[["option",4],["serialized",8]]]],[11,"views","","Iterates over all registered views.",33,[[]]],[11,"push","pliantdb::local::core::transaction","Adds an operation to the transaction.",16,[[["operation",3]]]],[11,"to_owned","","Convert this structure to be free of borrows.",23,[[],["executed",3]]],[11,"new","pliantdb::local::core::test_util","",26,[[],["basic",3]]],[11,"with_category","","",26,[[],["basic",3]]],[11,"with_parent_id","","",26,[[],["basic",3]]],[11,"new","","",27,[[],["testdirectory",3]]],[11,"open_local","pliantdb::local","Opens a local file as a pliantdb.",40,[[["configuration",3]]]],[11,"last_transaction_id","","Fetches the last transaction id that has been committed, …",40,[[]]]],"p":[[8,"Connection"],[3,"View"],[4,"QueryKey"],[3,"Header"],[3,"Document"],[3,"Revision"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Serialized"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[4,"Error"],[3,"Basic"],[3,"TestDirectory"],[3,"Configuration"],[3,"Tasks"],[3,"Views"],[4,"Error"],[3,"Collection"],[3,"Schema"],[3,"BasicCount"],[3,"BasicByParentId"],[3,"BasicByCategory"],[3,"BasicDatabase"],[3,"BasicCollectionWithNoViews"],[3,"UnassociatedCollection"],[3,"Storage"]]},\
"pliantdb_core":{"doc":"Core functionality and types for <code>PliantDB</code>.","i":[[0,"connection","pliantdb_core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb_core::connection","Defines all interactions with a [<code>schema::Database</code>], …",null,null],[10,"collection","","Accesses a collection for the connected [<code>schema::Database</code>]…",0,[[],[["collection",3],["result",4],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected […",0,[[["vec",3]],[["box",3],["pin",3]]]],[10,"update","","Updates an existing document in the connected […",0,[[["document",3]],[["pin",3],["box",3]]]],[10,"get","","Retrieves a stored document from [<code>Collection</code>] <code>C</code> …",0,[[],[["pin",3],["box",3]]]],[11,"view","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[],[["view",8],["view",3]]]],[10,"query","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[["view",8],["view",3]],[["pin",3],["box",3]]]],[10,"apply_transaction","","Applies a [<code>Transaction</code>] to the [<code>schema::Database</code>]. If any …",0,[[["transaction",3]],[["box",3],["pin",3]]]],[10,"list_executed_transactions","","Lists executed [<code>Transaction</code>]s from this [<code>schema::Database</code>]…",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[11,"new","","Creates a new instance using <code>connection</code>.",1,[[]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",1,[[]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",1,[[]]],[3,"View","","Parameters to query a <code>schema::View</code>.",null,null],[12,"key","","Key filtering criteria.",2,null],[11,"with_key","","Filters for entries in the view with <code>key</code>.",2,[[]]],[11,"with_keys","","Filters for entries in the view with <code>keys</code>.",2,[[["vec",3]]]],[11,"with_key_range","","Filters for entries in the view with <code>keys</code>.",2,[[["range",3]]]],[11,"query","","Executes the query and retrieves the results.",2,[[]]],[4,"QueryKey","","Filters a [<code>View</code>] by key.",null,null],[13,"Matches","","Matches all entries with the key provided.",3,null],[13,"Range","","Matches all entires with keys in the range provided.",3,null],[13,"Multiple","","Matches all entries that have keys that are included in …",3,null],[0,"document","pliantdb_core","Types for interacting with <code>Document</code>s.",null,null],[3,"Revision","pliantdb_core::document","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",4,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",4,null],[3,"Header","","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",5,null],[12,"revision","","The revision of the stored document.",5,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",6,null],[12,"header","","The header of the document, which contains the id and …",6,null],[12,"contents","","The serialized bytes of the stored item.",6,null],[11,"new","","Creates a new document with <code>contents</code>.",6,[[["id",3],["cow",4]]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",6,[[["id",3]],[["result",4],["error",3]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",6,[[],[["error",3],["deserialize",8],["result",4]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",6,[[],[["error",3],["result",4]]]],[11,"create_new_revision","","Creates a new revision.",6,[[["cow",4]],["option",4]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",6,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",6,[[["key",8]],[["map",3],["key",8]]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",6,[[["serialize",8]],[["serialize",8],["map",3]]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",6,[[["serialize",8],["key",8]],[["map",3],["serialize",8],["key",8]]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",6,[[],["document",3]]],[0,"schema","pliantdb_core","Types for defining database schema.",null,null],[0,"collection","pliantdb_core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb_core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",7,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",8,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",8,[[["schema",3]]]],[0,"view","pliantdb_core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb_core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb_core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",9,null],[12,"key","","The key used to index the View.",9,null],[12,"value","","An associated value stored in the view.",9,null],[11,"new","","Creates a new Map entry for the document with id <code>source</code>.",9,[[]]],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",10,null],[12,"key","","The key used to index the View.",10,null],[12,"value","","An associated value stored in the view.",10,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",11,[[],[["result",6],["cow",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",11,[[],["result",6]]],[4,"Error","pliantdb_core::schema::view","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",12,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",12,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",12,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",13,null],[16,"MapKey","","The key for this view.",13,null],[16,"MapValue","","An associated type that can be stored with each entry in …",13,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",13,null],[10,"version","","The version of the view. Changing this value will cause …",13,[[]]],[10,"name","","The name of the view. Must be unique per collection.",13,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",13,[[["document",3]],["mapresult",6]]],[11,"reduce","","The reduce function for this view. If …",13,[[],[["result",4],["error",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",14,null],[13,"Borrowed","","a borrowed value",14,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",15,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",15,[[]]],[10,"name","","Wraps [<code>View::name</code>]",15,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",15,[[["document",3]],[["option",4],["result",4],["error",4]]]],[8,"Database","pliantdb_core::schema","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",16,[[["schema",3]]]],[3,"Schema","","A collection of defined collections and views.",null,null],[0,"transaction","pliantdb_core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb_core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",17,null],[11,"push","","Adds an operation to the transaction.",17,[[["operation",3]]]],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",18,null],[12,"command","","The command being performed.",18,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",19,null],[12,"contents","pliantdb_core::transaction::Command","The initial contents of the document.",20,null],[13,"Update","pliantdb_core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",19,null],[12,"header","pliantdb_core::transaction::Command","The current header of the <code>Document</code>.",21,null],[12,"contents","","The new contents to store within the <code>Document</code>.",21,null],[4,"OperationResult","pliantdb_core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",22,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",22,null],[12,"collection","pliantdb_core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",23,null],[12,"header","","The header of the updated <code>Document</code>.",23,null],[3,"Executed","pliantdb_core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",24,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",24,null],[11,"to_owned","","Convert this structure to be free of borrows.",24,[[],["executed",3]]],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",25,null],[12,"id","","The id of the changed <code>Document</code>.",25,null],[0,"test_util","pliantdb_core","Shared schemas and utilities used for unit testing.",null,null],[3,"Basic","pliantdb_core::test_util","",null,null],[12,"value","","",26,null],[12,"category","","",26,null],[12,"parent_id","","",26,null],[11,"new","","",26,[[]]],[11,"with_category","","",26,[[]]],[11,"with_parent_id","","",26,[[]]],[3,"BasicCount","","",null,null],[3,"BasicByParentId","","",null,null],[3,"BasicByCategory","","",null,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",27,null],[11,"new","","",27,[[["asref",8],["path",3]]]],[3,"BasicCollectionWithNoViews","","",null,null],[3,"UnassociatedCollection","","",null,null],[4,"Error","pliantdb_core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",28,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",28,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",28,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",28,null],[11,"from","pliantdb_core::connection","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","pliantdb_core::document","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::collection","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","pliantdb_core::schema","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view::map","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","pliantdb_core::transaction","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","pliantdb_core::test_util","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"collection","","",30,[[],["id",3]]],[11,"version","","",30,[[]]],[11,"name","","",30,[[],["cow",4]]],[11,"map","","",30,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"collection","","",31,[[],["id",3]]],[11,"version","","",31,[[]]],[11,"name","","",31,[[],["cow",4]]],[11,"map","","",31,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"collection","","",32,[[],["id",3]]],[11,"version","","",32,[[]]],[11,"name","","",32,[[],["cow",4]]],[11,"map","","",32,[[["document",3]],[["option",4],["result",4],["error",4]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","pliantdb_core","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"id","pliantdb_core::test_util","",26,[[],["id",3]]],[11,"define_views","","",26,[[["schema",3]]]],[11,"id","","",34,[[],["id",3]]],[11,"define_views","","",34,[[["schema",3]]]],[11,"id","","",35,[[],["id",3]]],[11,"define_views","","",35,[[["schema",3]]]],[11,"define_collections","","",33,[[["schema",3]]]],[11,"version","","",30,[[]]],[11,"name","","",30,[[],["cow",4]]],[11,"map","","",30,[[["document",3]],["mapresult",6]]],[11,"reduce","","",30,[[],[["result",4],["error",4]]]],[11,"version","","",31,[[]]],[11,"name","","",31,[[],["cow",4]]],[11,"map","","",31,[[["document",3]],["mapresult",6]]],[11,"reduce","","",31,[[],[["result",4],["error",4]]]],[11,"version","","",32,[[]]],[11,"name","","",32,[[],["cow",4]]],[11,"map","","",32,[[["document",3]],["mapresult",6]]],[11,"reduce","","",32,[[],[["result",4],["error",4]]]],[11,"drop","","",27,[[]]],[11,"as_ref","pliantdb_core::schema::view","",14,[[]]],[11,"as_ref","pliantdb_core::test_util","",27,[[],["path",3]]],[11,"from","pliantdb_core::schema::collection","",7,[[]]],[11,"from","","",7,[[["string",3]]]],[11,"from","pliantdb_core::schema::view","",12,[[["error",3]]]],[11,"from","","",14,[[],["serializablevalue",4]]],[11,"from","pliantdb_core","",28,[[["error",3]]]],[11,"clone","pliantdb_core::document","",4,[[],["revision",3]]],[11,"clone","","",5,[[],["header",3]]],[11,"clone","pliantdb_core::schema::collection","",7,[[],["id",3]]],[11,"clone","pliantdb_core::schema::view::map","",10,[[],["serialized",3]]],[11,"clone","pliantdb_core::transaction","",25,[[],["changeddocument",3]]],[11,"default","pliantdb_core::schema","",29,[[],["schema",3]]],[11,"default","pliantdb_core::transaction","",17,[[],["transaction",3]]],[11,"default","pliantdb_core::test_util","",26,[[],["basic",3]]],[11,"eq","pliantdb_core::document","",4,[[["revision",3]]]],[11,"ne","","",4,[[["revision",3]]]],[11,"eq","","",5,[[["header",3]]]],[11,"ne","","",5,[[["header",3]]]],[11,"eq","pliantdb_core::schema::collection","",7,[[["id",3]]]],[11,"ne","","",7,[[["id",3]]]],[11,"eq","pliantdb_core::schema::view::map","",9,[[["map",3]]]],[11,"ne","","",9,[[["map",3]]]],[11,"eq","pliantdb_core::test_util","",26,[[["basic",3]]]],[11,"ne","","",26,[[["basic",3]]]],[11,"fmt","pliantdb_core::document","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",7,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema","",29,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view::map","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",12,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::transaction","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",28,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::test_util","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",7,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",12,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",28,[[["formatter",3]],["result",6]]],[11,"hash","pliantdb_core::schema::collection","",7,[[]]],[11,"source","pliantdb_core::schema::view","",12,[[],[["option",4],["error",8]]]],[11,"serialize","pliantdb_core::document","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::collection","",7,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::view::map","",10,[[],["result",4]]],[11,"serialize","pliantdb_core::transaction","",19,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","pliantdb_core::test_util","",26,[[],["result",4]]],[11,"deserialize","pliantdb_core::document","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::collection","",7,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::view::map","",10,[[],["result",4]]],[11,"deserialize","pliantdb_core::transaction","",19,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","pliantdb_core::test_util","",26,[[],["result",4]]],[11,"new","pliantdb_core::document","Creates the first revision for a document with the SHA256 …",4,[[]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",4,[[],["option",4]]],[11,"define_collection","pliantdb_core::schema","Adds the collection <code>C</code> and its views.",29,[[]]],[11,"define_view","","Adds the view <code>V</code>.",29,[[["view",8]]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",29,[[]]],[11,"view_by_name","","Looks up a [<code>view::Serialized</code>] by name.",29,[[],[["option",4],["serialized",8]]]],[11,"view","","Looks up a [<code>view::Serialized</code>] through the the type <code>V</code>.",29,[[],[["option",4],["serialized",8]]]],[11,"views","","Iterates over all registered views.",29,[[]]]],"p":[[8,"Connection"],[3,"Collection"],[3,"View"],[4,"QueryKey"],[3,"Revision"],[3,"Header"],[3,"Document"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Serialized"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[3,"Basic"],[3,"TestDirectory"],[4,"Error"],[3,"Schema"],[3,"BasicCount"],[3,"BasicByParentId"],[3,"BasicByCategory"],[3,"BasicDatabase"],[3,"BasicCollectionWithNoViews"],[3,"UnassociatedCollection"]]},\
"pliantdb_jobs":{"doc":"Aysnc jobs management for <code>PliantDB</code>.","i":[[0,"manager","pliantdb_jobs","Types related to the job [<code>Manager</code>].",null,null],[3,"Manager","pliantdb_jobs::manager","A background jobs manager.",null,null],[11,"enqueue","","Pushes a <code>job</code> into the queue. Pushing the same job …",0,[[["job",8]]]],[11,"lookup_or_enqueue","","Uses [<code>Keyed::key</code>] to ensure no other job with the same <code>key</code>…",0,[[["keyed",8]]]],[11,"spawn_worker","","Spawns a worker. In general, you shouldn\'t need to call …",0,[[]]],[0,"task","pliantdb_jobs","Types related to defining [<code>Job</code>]s.",null,null],[3,"Id","pliantdb_jobs::task","he <code>Id</code> of an executing task.",null,null],[3,"Handle","","References a background task.",null,null],[12,"id","","The task\'s id.",1,null],[11,"clone","","Returns a copy of this handle. When the job is completed, …",1,[[]]],[11,"receive","","Waits for the job to complete and returns the result.",1,[[]]],[11,"try_receive","","Tries to receive the status of the job. If available, it …",1,[[],[["result",4],["arc",3],["tryrecverror",4]]]],[8,"Job","pliantdb_jobs","Defines a background job that can be queued and executed.",null,null],[16,"Output","","The output type of the job.",2,null],[10,"execute","","Executes the job and returns the result.",2,[[],[["pin",3],["box",3]]]],[8,"Keyed","","Defines a background job that has a unique <code>key</code>.",null,null],[10,"key","","The unique <code>key</code> for this <code>Job</code>",3,[[]]],[11,"from","pliantdb_jobs::manager","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","pliantdb_jobs::task","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","pliantdb_jobs::manager","",0,[[]]],[11,"clone","pliantdb_jobs::task","",4,[[],["id",3]]],[11,"default","pliantdb_jobs::manager","",0,[[]]],[11,"eq","pliantdb_jobs::task","",4,[[["id",3]]]],[11,"ne","","",4,[[["id",3]]]],[11,"fmt","pliantdb_jobs::manager","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_jobs::task","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]]],"p":[[3,"Manager"],[3,"Handle"],[8,"Job"],[8,"Keyed"],[3,"Id"]]},\
"pliantdb_local":{"doc":"Local storage backend for <code>PliantDB</code>.","i":[[0,"connection","pliantdb_local::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb_local::core::connection","Defines all interactions with a [<code>schema::Database</code>], …",null,null],[10,"collection","","Accesses a collection for the connected [<code>schema::Database</code>]…",0,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected […",0,[[["global",3],["vec",3]],[["pin",3],["box",3]]]],[10,"update","","Updates an existing document in the connected […",0,[[["document",3]],[["box",3],["pin",3]]]],[10,"get","","Retrieves a stored document from [<code>Collection</code>] <code>C</code> …",0,[[],[["pin",3],["box",3]]]],[11,"view","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[],["view",3]]],[10,"query","","Initializes [<code>ViewQuery</code>] for [<code>schema::View</code>] <code>V</code>.",0,[[["view",3]],[["pin",3],["box",3]]]],[10,"apply_transaction","","Applies a [<code>Transaction</code>] to the [<code>schema::Database</code>]. If any …",0,[[["transaction",3]],[["pin",3],["box",3]]]],[10,"list_executed_transactions","","Lists executed [<code>Transaction</code>]s from this [<code>schema::Database</code>]…",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[3,"View","","Parameters to query a <code>schema::View</code>.",null,null],[12,"key","","Key filtering criteria.",1,null],[4,"QueryKey","","Filters a [<code>View</code>] by key.",null,null],[13,"Matches","","Matches all entries with the key provided.",2,null],[13,"Range","","Matches all entires with keys in the range provided.",2,null],[13,"Multiple","","Matches all entries that have keys that are included in …",2,null],[0,"document","pliantdb_local::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb_local::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",3,null],[12,"revision","","The revision of the stored document.",3,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",4,null],[12,"header","","The header of the document, which contains the id and …",4,null],[12,"contents","","The serialized bytes of the stored item.",4,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",5,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",5,null],[0,"schema","pliantdb_local::core","Types for defining database schema.",null,null],[0,"collection","pliantdb_local::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb_local::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[0,"view","pliantdb_local::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb_local::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb_local::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",9,null],[12,"key","","The key used to index the View.",9,null],[12,"value","","An associated value stored in the view.",9,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["cow",4],["error",3],["result",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[4,"Error","pliantdb_local::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["result",4],["option",4],["error",4]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["cow",4],["error",3],["result",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Map","pliantdb_local::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"Collection","","The collection this view belongs to",12,null],[16,"MapKey","","The key for this view.",12,null],[16,"MapValue","","An associated type that can be stored with each entry in …",12,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",12,null],[10,"version","","The version of the view. Changing this value will cause …",12,[[]]],[10,"name","","The name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",12,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",12,[[],[["result",4],["error",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",7,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",7,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",15,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"as_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",10,[[],[["cow",4],["error",3],["result",4]]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[],[["result",4],["error",3]]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Serialized","","Wraps a [<code>View</code>] with serialization to erase the associated …",null,null],[10,"collection","","Wraps [<code>View::collection</code>]",14,[[],["id",3]]],[10,"version","","Wraps [<code>View::version</code>]",14,[[]]],[10,"name","","Wraps [<code>View::name</code>]",14,[[],["cow",4]]],[10,"map","","Wraps [<code>View::map</code>]",14,[[["document",3]],[["result",4],["option",4],["error",4]]]],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"Serialization","","An error occurred while serializing or deserializing.",11,null],[13,"KeySerialization","","An error occurred while serializing or deserializing keys …",11,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",11,null],[0,"transaction","pliantdb_local::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb_local::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",16,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",17,null],[12,"command","","The command being performed.",17,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",18,null],[12,"contents","pliantdb_local::core::transaction::Command","The initial contents of the document.",19,null],[13,"Update","pliantdb_local::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",18,null],[12,"header","pliantdb_local::core::transaction::Command","The current header of the <code>Document</code>.",20,null],[12,"contents","","The new contents to store within the <code>Document</code>.",20,null],[4,"OperationResult","pliantdb_local::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",21,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",21,null],[12,"collection","pliantdb_local::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",22,null],[12,"header","","The header of the updated <code>Document</code>.",22,null],[3,"Executed","pliantdb_local::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",23,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",23,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",24,null],[12,"id","","The id of the changed <code>Document</code>.",24,null],[4,"Error","pliantdb_local::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",25,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",25,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",25,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",25,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"Basic","pliantdb_local::core::test_util","",null,null],[12,"value","","",26,null],[12,"category","","",26,null],[12,"parent_id","","",26,null],[3,"BasicCount","","",null,null],[3,"BasicByParentId","","",null,null],[3,"BasicByCategory","","",null,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",27,null],[3,"BasicCollectionWithNoViews","","",null,null],[3,"UnassociatedCollection","","",null,null],[0,"config","pliantdb_local","Configuration options.",null,null],[3,"Configuration","pliantdb_local::config","Configuration options for [<code>Storage</code>].",null,null],[12,"workers","","Configuration options related to background tasks.",28,null],[12,"views","","Configuration options related to views.",28,null],[3,"Tasks","","Configujration options for background tasks.",null,null],[12,"worker_count","","Defines how many workers should be spawned to process …",29,null],[3,"Views","","Configuration options for views.",null,null],[12,"check_integrity_on_open","","If true, the database will scan all views during the call …",30,null],[4,"Error","pliantdb_local","Errors that can occur from interacting with storage.",null,null],[13,"Sled","","An error occurred interacting with <code>sled</code>.",31,null],[13,"InternalSerialization","","An error occurred serializing the underlying database …",31,null],[13,"Serialization","","An error occurred serializing the contents of a <code>Document</code> …",31,null],[13,"InternalCommunication","","An internal error occurred while waiting for a message.",31,null],[13,"View","","An internal error occurred while waiting for a message.",31,null],[3,"Storage","","A local, file-based database.",null,null],[17,"LIST_TRANSACTIONS_DEFAULT_RESULT_COUNT","","If no <code>result_limit</code> is specified, this value is the limit …",null,null],[17,"LIST_TRANSACTIONS_MAX_RESULTS","","The maximum number of results allowed to be returned from …",null,null],[11,"from","pliantdb_local::core::connection","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"init","","",32,[[]]],[11,"deref","","",32,[[]]],[11,"deref_mut","","",32,[[]]],[11,"drop","","",32,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","pliantdb_local::core::document","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","pliantdb_local::core::schema","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","pliantdb_local::core::schema::view::map","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","pliantdb_local::core::schema","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"from","pliantdb_local::core::transaction","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","pliantdb_local::core","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","pliantdb_local::core::test_util","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"define_collections","","",26,[[["schema",3]]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"collection","","",34,[[],["id",3]]],[11,"version","","",34,[[]]],[11,"name","","",34,[[],["cow",4]]],[11,"map","","",34,[[["document",3]],[["result",4],["option",4],["error",4]]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"collection","","",35,[[],["id",3]]],[11,"version","","",35,[[]]],[11,"name","","",35,[[],["cow",4]]],[11,"map","","",35,[[["document",3]],[["result",4],["option",4],["error",4]]]],[11,"init","","",35,[[]]],[11,"deref","","",35,[[]]],[11,"deref_mut","","",35,[[]]],[11,"drop","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"collection","","",36,[[],["id",3]]],[11,"version","","",36,[[]]],[11,"name","","",36,[[],["cow",4]]],[11,"map","","",36,[[["document",3]],[["result",4],["option",4],["error",4]]]],[11,"init","","",36,[[]]],[11,"deref","","",36,[[]]],[11,"deref_mut","","",36,[[]]],[11,"drop","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"init","","",37,[[]]],[11,"deref","","",37,[[]]],[11,"deref_mut","","",37,[[]]],[11,"drop","","",37,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"define_collections","","",38,[[["schema",3]]]],[11,"init","","",38,[[]]],[11,"deref","","",38,[[]]],[11,"deref_mut","","",38,[[]]],[11,"drop","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"define_collections","","",39,[[["schema",3]]]],[11,"init","","",39,[[]]],[11,"deref","","",39,[[]]],[11,"deref_mut","","",39,[[]]],[11,"drop","","",39,[[]]],[11,"from","pliantdb_local::config","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"from","pliantdb_local","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"fmt","pliantdb_local::core::schema","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",6,[[],["id",3]]],[11,"from","","",11,[[["error",3]],["error",4]]],[11,"from","pliantdb_local::core","",25,[[["error",3]],["error",4]]],[11,"from","pliantdb_local::core::schema","",6,[[["string",3]],["id",3]]],[11,"from","","",13,[[],["serializablevalue",4]]],[11,"define_collections","pliantdb_local::core::test_util","",37,[[["schema",3]]]],[11,"as_ref","pliantdb_local::core::schema","",13,[[]]],[11,"as_ref","pliantdb_local::core::test_util","",27,[[],["path",3]]],[11,"hash","pliantdb_local::core::schema","",6,[[]]],[11,"default","","",33,[[],["schema",3]]],[11,"default","pliantdb_local::core::transaction","",16,[[],["transaction",3]]],[11,"default","pliantdb_local::core::test_util","",26,[[],["basic",3]]],[11,"deserialize","pliantdb_local::core::transaction","",18,[[],[["result",4],["command",4]]]],[11,"deserialize","pliantdb_local::core::document","",4,[[],[["document",3],["result",4]]]],[11,"deserialize","","",5,[[],[["result",4],["revision",3]]]],[11,"deserialize","pliantdb_local::core::transaction","",21,[[],[["operationresult",4],["result",4]]]],[11,"deserialize","pliantdb_local::core::schema::view::map","",9,[[],[["result",4],["serialized",3]]]],[11,"deserialize","pliantdb_local::core::transaction","",24,[[],[["result",4],["changeddocument",3]]]],[11,"deserialize","pliantdb_local::core::schema","",6,[[],[["result",4],["id",3]]]],[11,"deserialize","pliantdb_local::core::test_util","",26,[[],[["basic",3],["result",4]]]],[11,"deserialize","pliantdb_local::core::document","",3,[[],[["result",4],["header",3]]]],[11,"deserialize","pliantdb_local::core::transaction","",23,[[],[["executed",3],["result",4]]]],[11,"source","pliantdb_local::core::schema","",11,[[],[["error",8],["option",4]]]],[11,"clone","pliantdb_local::core::document","",3,[[],["header",3]]],[11,"clone","pliantdb_local::core::schema","",6,[[],["id",3]]],[11,"clone","pliantdb_local::core::document","",5,[[],["revision",3]]],[11,"clone","pliantdb_local::core::transaction","",24,[[],["changeddocument",3]]],[11,"clone","pliantdb_local::core::schema::view::map","",9,[[],["serialized",3]]],[11,"eq","pliantdb_local::core::schema","",6,[[["id",3]]]],[11,"ne","","",6,[[["id",3]]]],[11,"eq","pliantdb_local::core::test_util","",26,[[["basic",3]]]],[11,"ne","","",26,[[["basic",3]]]],[11,"eq","pliantdb_local::core::document","",5,[[["revision",3]]]],[11,"ne","","",5,[[["revision",3]]]],[11,"eq","","",3,[[["header",3]]]],[11,"ne","","",3,[[["header",3]]]],[11,"eq","pliantdb_local::core::schema","",8,[[["map",3]]]],[11,"ne","","",8,[[["map",3]]]],[11,"id","pliantdb_local::core::test_util","",39,[[],["id",3]]],[11,"define_views","","",39,[[["schema",3]]]],[11,"id","","",38,[[],["id",3]]],[11,"define_views","","",38,[[["schema",3]]]],[11,"id","","",26,[[],["id",3]]],[11,"define_views","","",26,[[["schema",3]]]],[11,"fmt","","",38,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::test_util","",36,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",11,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",17,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::test_util","",35,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",34,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",39,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::test_util","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",33,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::test_util","",37,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema::view::map","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"version","pliantdb_local::core::test_util","",35,[[]]],[11,"name","","",35,[[],["cow",4]]],[11,"map","","",35,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","",35,[[],[["result",4],["error",4]]]],[11,"version","","",36,[[]]],[11,"name","","",36,[[],["cow",4]]],[11,"map","","",36,[[["document",3]],[["result",4],["option",4],["error",4]]]],[11,"reduce","","",36,[[],[["result",4],["error",4]]]],[11,"version","","",34,[[]]],[11,"name","","",34,[[],["cow",4]]],[11,"map","","",34,[[["document",3]],[["result",4],["option",4],["error",4]]]],[11,"reduce","","",34,[[],[["result",4],["error",4]]]],[11,"serialize","pliantdb_local::core::schema","",6,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",18,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","pliantdb_local::core::document","",5,[[],["result",4]]],[11,"serialize","pliantdb_local::core::test_util","",26,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",23,[[],["result",4]]],[11,"serialize","pliantdb_local::core::document","",4,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",21,[[],["result",4]]],[11,"serialize","pliantdb_local::core::schema::view::map","",9,[[],["result",4]]],[11,"drop","pliantdb_local::core::test_util","",27,[[]]],[11,"from","pliantdb_local","",31,[[["error",4]]]],[11,"from","","",31,[[["error",6]]]],[11,"from","","",31,[[["error",3]]]],[11,"from","","",31,[[["recverror",4]]]],[11,"from","","",31,[[["error",4]]]],[11,"into","","",31,[[],["error",4]]],[11,"clone","","",40,[[]]],[11,"default","pliantdb_local::config","",28,[[],["configuration",3]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_local","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"source","","",31,[[],[["option",4],["error",8]]]],[11,"collection","","",40,[[],[["collection",3],["error",4],["result",4]]]],[11,"insert","","",40,[[["vec",3]],[["box",3],["pin",3]]]],[11,"update","","",40,[[["document",3]],[["box",3],["pin",3]]]],[11,"apply_transaction","","",40,[[["transaction",3]],[["box",3],["pin",3]]]],[11,"get","","",40,[[],[["box",3],["pin",3]]]],[11,"list_executed_transactions","","",40,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[11,"query","","",40,[[["view",3],["view",8]],[["pin",3],["box",3]]]],[11,"new","pliantdb_local::core::connection","Creates a new instance using <code>connection</code>.",32,[[],["collection",3]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",32,[[]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",32,[[]]],[11,"with_key","","Filters for entries in the view with <code>key</code>.",1,[[],["view",3]]],[11,"with_keys","","Filters for entries in the view with <code>keys</code>.",1,[[["global",3],["vec",3]],["view",3]]],[11,"with_key_range","","Filters for entries in the view with <code>keys</code>.",1,[[["range",3]],["view",3]]],[11,"query","","Executes the query and retrieves the results.",1,[[]]],[11,"new","pliantdb_local::core::document","Creates a new document with <code>contents</code>.",4,[[["cow",4],["id",3]],["document",3]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",4,[[["id",3]],[["document",3],["error",3],["result",4]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",4,[[],[["error",3],["result",4]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",4,[[],[["result",4],["error",3]]]],[11,"create_new_revision","","Creates a new revision.",4,[[["cow",4]],[["document",3],["option",4]]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",4,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",4,[[],["map",3]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",4,[[],["map",3]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",4,[[],["map",3]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",4,[[],["document",3]]],[11,"new","","Creates the first revision for a document with the SHA256 …",5,[[],["revision",3]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",5,[[],[["option",4],["revision",3]]]],[11,"new","pliantdb_local::core::schema","Creates a new Map entry for the document with id <code>source</code>.",8,[[],["map",3]]],[11,"define_collection","","Adds the collection <code>C</code> and its views.",33,[[]]],[11,"define_view","","Adds the view <code>V</code>.",33,[[]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",33,[[]]],[11,"view_by_name","","Looks up a [<code>view::Serialized</code>] by name.",33,[[],[["option",4],["serialized",8]]]],[11,"view","","Looks up a [<code>view::Serialized</code>] through the the type <code>V</code>.",33,[[],[["option",4],["serialized",8]]]],[11,"views","","Iterates over all registered views.",33,[[]]],[11,"push","pliantdb_local::core::transaction","Adds an operation to the transaction.",16,[[["operation",3]]]],[11,"to_owned","","Convert this structure to be free of borrows.",23,[[],["executed",3]]],[11,"new","pliantdb_local::core::test_util","",26,[[],["basic",3]]],[11,"with_category","","",26,[[],["basic",3]]],[11,"with_parent_id","","",26,[[],["basic",3]]],[11,"new","","",27,[[],["testdirectory",3]]],[11,"open_local","pliantdb_local","Opens a local file as a pliantdb.",40,[[["asref",8],["send",8],["configuration",3],["path",3]]]],[11,"last_transaction_id","","Fetches the last transaction id that has been committed, …",40,[[]]]],"p":[[8,"Connection"],[3,"View"],[4,"QueryKey"],[3,"Header"],[3,"Document"],[3,"Revision"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Serialized"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[4,"Error"],[3,"Basic"],[3,"TestDirectory"],[3,"Configuration"],[3,"Tasks"],[3,"Views"],[4,"Error"],[3,"Collection"],[3,"Schema"],[3,"BasicCount"],[3,"BasicByParentId"],[3,"BasicByCategory"],[3,"BasicDatabase"],[3,"BasicCollectionWithNoViews"],[3,"UnassociatedCollection"],[3,"Storage"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
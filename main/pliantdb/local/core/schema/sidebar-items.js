initSidebarItems({"enum":[["Error","Errors that arise when interacting with views."],["SerializableValue","Represents either an owned value or a borrowed value. Functionally equivalent to `std::borrow::Cow` except this type doesn't require the wrapped type to implement `Clone`."]],"mod":[["collection","Types for defining a `Collection`."],["view","Types for defining map/reduce-powered `View`s."]],"struct":[["Id","A unique collection id. Choose collection names that aren't likely to conflict with others, so that if someone mixes collections from multiple authors in a single database."],["Map","A document's entry in a View's mappings."],["Schema","A collection of defined collections and views."]],"trait":[["Collection","A namespaced collection of `Document<Self>` items and views."],["Database","Defines a group of collections that are stored into a single database."],["Key","A trait that enables a type to convert itself to a big-endian/network byte order."],["View","A map/reduce powered indexing and aggregation schema."]],"type":[["MapResult","A type alias for the result of `View::map()`."]]});
initSidebarItems({"enum":[["Error","Errors that arise when interacting with views."],["SerializableValue","Represents either an owned value or a borrowed value. Functionally equivalent to `std::borrow::Cow` except this type doesn’t require the wrapped type to implement `Clone`."]],"mod":[["map","Types for defining a `Map` within a `View`."]],"struct":[["CompositeKeyError","An error occurred inside of one of the composite key fields."],["IncorrectByteLength","An error that indicates an unexpected number of bytes were present."]],"trait":[["CollectionView","A [`View`] for a [`Collection`] that stores serde-compatible documents. The only difference between implmementing this and [`View`] is that the `map` function receives a [`CollectionDocument`] instead of a [`Document`]."],["EnumKey","Adds `Key` support to an enum. Requires implementing `ToPrimitive` and `FromPrimitive`, or using a crate like num-derive to do it automatically. Take care when using enums as keys: if the order changes or if the meaning of existing numerical values changes, make sure to update any related views’ version number to ensure the values are re-evaluated."],["Key","A trait that enables a type to convert itself to a big-endian/network byte order."],["Serialized","Wraps a [`View`] with serialization to erase the associated types"],["View","A map/reduce powered indexing and aggregation schema."]],"type":[["MapResult","A type alias for the result of `View::map()`."]]});
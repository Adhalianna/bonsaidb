var searchIndex = JSON.parse('{\
"pliantdb":{"doc":"pliantdb (name not set in stone) is a programmable …","i":[[0,"storage","pliantdb","types for interacting with a local, file-based database",null,null],[17,"LIST_TRANSACTIONS_MAX_RESULTS","pliantdb::storage","the maximum number of results allowed to be returned from …",null,null],[17,"LIST_TRANSACTIONS_DEFAULT_RESULT_COUNT","","if no <code>result_limit</code> is specified, this value is the limit …",null,null],[3,"Storage","","a local, file-based database",null,null],[11,"open_local","","opens a local file as a pliantdb",0,[[["asref",8],["path",3]],[["error",4],["result",4]]]],[4,"Error","","errors that can occur from interacting with storage",null,null],[13,"Sled","","an error occurred interacting with <code>sled</code>",1,null],[13,"InternalSerialization","","an error occurred serializing the underlying database …",1,null],[13,"Serialization","","an error occurred serializing the contents of a <code>Document</code> …",1,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",1,[[["error",4]]]],[11,"from","","",1,[[["error",6]]]],[11,"from","","",1,[[["error",3]]]],[11,"into","","",1,[[],["error",4]]],[11,"clone","","",0,[[],["storage",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"collection","","",0,[[],[["collection",3],["error",4],["result",4]]]],[11,"insert","","",0,[[["vec",3]],[["box",3],["pin",3]]]],[11,"update","","",0,[[["document",3]],[["box",3],["pin",3]]]],[11,"apply_transaction","","",0,[[["transaction",3]],[["pin",3],["box",3]]]],[11,"get","","",0,[[["uuid",3]],[["pin",3],["box",3]]]],[11,"list_executed_transactions","","",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]]],"p":[[3,"Storage"],[4,"Error"]]},\
"pliantdb_core":{"doc":"Core functionality and types for <code>PliantDB</code>.","i":[[0,"connection","pliantdb_core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb_core::connection","a trait that defines all interactions with a <code>Database</code>, …",null,null],[10,"collection","","access a collection for the connected <code>Database</code>",0,[[],[["collection",3],["error",4],["result",4]]]],[10,"insert","","insert a newly created document into the connected …",0,[[["vec",3]],[["box",3],["pin",3]]]],[10,"update","","update an existing document in the connected <code>Database</code> for …",0,[[["document",3]],[["pin",3],["box",3]]]],[10,"get","","retrieve a stored document from collection <code>C</code> identified …",0,[[["uuid",3]],[["box",3],["pin",3]]]],[10,"apply_transaction","","apply a transaction to the database. If any operation in …",0,[[["transaction",3]],[["pin",3],["box",3]]]],[10,"list_executed_transactions","","list executed transactions from this database. By …",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","a struct used to interact with a collection over a …",null,null],[11,"new","","create a new instance using <code>connection</code>",1,[[]]],[11,"push","","add a new <code>Document<Cl></code> with the contents <code>item</code>",1,[[]]],[11,"update","","add a new <code>Document<Cl></code> with the contents <code>item</code>",1,[[["document",3]]]],[11,"get","","retrieve a <code>Document<Cl></code> with <code>id</code> from the connection",1,[[["uuid",3]]]],[0,"document","pliantdb_core","Types for interacting with <code>Document</code>s.",null,null],[3,"Revision","pliantdb_core::document","a struct containing information about a <code>Document</code>\'s …",null,null],[12,"id","","The current revision id of the document. This value is …",2,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",2,null],[3,"Header","","the header of a <code>Document</code>",null,null],[12,"id","","the id of the Document. Unique across the collection <code>C</code>",3,null],[12,"revision","","the revision of the stored document.",3,null],[3,"Document","","a struct representing a document in the database",null,null],[12,"collection","","the <code>Id</code> of the <code>Collection</code> this document belongs to",4,null],[12,"header","","the header of the document, which contains the id and …",4,null],[12,"contents","","the serialized bytes of the stored item",4,null],[11,"new","","create a new document with <code>contents</code>",4,[[["id",3],["cow",4]]]],[11,"with_contents","","create a new document with serialized bytes from <code>contents</code>",4,[[["id",3]],[["result",4],["error",3]]]],[11,"contents","","retrieves <code>contents</code> through deserialization into the type <code>D</code>",4,[[],[["error",3],["result",4],["deserialize",8]]]],[11,"set_contents","","serializes and stores <code>contents</code> into this document",4,[[],[["result",4],["error",3]]]],[11,"create_new_revision","","create a new revision. <strong>WARNING:</strong> This normally should not …",4,[[["cow",4]],["option",4]]],[11,"emit","","create a <code>Map</code> result with an empty key and value",4,[[],["map",3]]],[11,"emit_key","","create a <code>Map</code> result with a <code>key</code> and an empty value",4,[[["key",8]],[["key",8],["map",3]]]],[11,"emit_value","","create a <code>Map</code> result with <code>value</code> and an empty key",4,[[["serialize",8]],[["map",3],["serialize",8]]]],[11,"emit_key_and_value","","create a <code>Map</code> result with a <code>key</code> and <code>value</code>",4,[[["key",8],["serialize",8]],[["map",3],["key",8],["serialize",8]]]],[11,"to_owned","","clone the document\'s data so that it\'s no longer borrowed …",4,[[],["document",3]]],[0,"schema","pliantdb_core","Types for defining database schema.",null,null],[0,"collection","pliantdb_core::schema","types for defining a <code>Collection</code>",null,null],[3,"Id","pliantdb_core::schema::collection","a unique collection id. Choose collection names that …",null,null],[12,"0","","",5,null],[8,"Collection","","a namespaced collection of <code>Document<Self></code> items and views",null,null],[10,"id","","the <code>Id</code> of this collection",6,[[],["id",3]]],[10,"define_views","","implementors define all of their <code>View</code>s in <code>schema</code>",6,[[["schema",3]]]],[0,"view","pliantdb_core::schema","types for defining map/reduce-powered <code>View</code>s",null,null],[0,"map","pliantdb_core::schema::view","types for defining a <code>Map</code> within a <code>View</code>",null,null],[3,"Map","pliantdb_core::schema::view::map","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",7,null],[12,"key","","the key used to index the View",7,null],[12,"value","","an associated value stored in the view",7,null],[11,"new","","creates a new Map entry for the document with id <code>source</code>",7,[[["uuid",3]]]],[3,"Serialized","","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",8,null],[12,"key","","the key used to index the View",8,null],[12,"value","","an associated value stored in the view",8,null],[8,"Key","","a trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",9,[[],["cow",4]]],[10,"from_big_endian_bytes","","convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",9,[[]]],[4,"Error","pliantdb_core::schema::view","errors that arise when interacting with views",null,null],[13,"SerializationError","","an error occurred while serializing or deserializing",10,null],[13,"ReduceUnimplemented","","returned when",10,null],[6,"MapResult","","a type alias for the result of <code>View::map()</code>",null,null],[8,"View","","a map/reduce powered indexing and aggregation schema",null,null],[16,"MapKey","","the key for this view.",11,null],[16,"MapValue","","an associated type that can be stored with each entry in …",11,null],[16,"Reduce","","when implementing reduce(), this is the returned type",11,null],[10,"version","","the version of the view. Changing this value will cause …",11,[[]]],[10,"name","","the name of the view. Must be unique per collection.",11,[[],["cow",4]]],[10,"map","","the map function for this view. This function is …",11,[[["document",3]],["mapresult",6]]],[11,"reduce","","the reduce function for this view. If …",11,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","an enum representing either an owned value or a borrowed …",null,null],[13,"Owned","","an owned value",12,null],[13,"Borrowed","","a borrowed value",12,null],[8,"Database","pliantdb_core::schema","a trait that defines a group of collections that are …",null,null],[10,"define_collections","","implementors must define their <code>Collection</code>s in <code>schema</code>",13,[[["schema",3]]]],[3,"Schema","","a collection of defined collections and views",null,null],[0,"transaction","pliantdb_core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb_core::transaction","a list of operations to execute as a single unit. If any …",null,null],[12,"operations","","the operations in this transaction",14,null],[11,"push","","add an operation to the transaction",14,[[["operation",3]]]],[3,"Operation","","a single operation performed on a <code>Collection</code>",null,null],[12,"collection","","the id of the <code>Collection</code>",15,null],[12,"command","","the command being performed",15,null],[4,"Command","","a command to execute within a <code>Collection</code>",null,null],[13,"Insert","","insert a new document containing <code>contents</code>",16,null],[12,"contents","pliantdb_core::transaction::Command","the initial contents of the document",17,null],[13,"Update","pliantdb_core::transaction","update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",16,null],[12,"header","pliantdb_core::transaction::Command","the current header of the <code>Document</code>",18,null],[12,"contents","","the new contents to store within the <code>Document</code>",18,null],[4,"OperationResult","pliantdb_core::transaction","information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","an operation succeeded but had no information to output",19,null],[13,"DocumentUpdated","","a <code>Document</code> was updated",19,null],[12,"collection","pliantdb_core::transaction::OperationResult","the id of the <code>Collection</code> of the updated <code>Document</code>",20,null],[12,"header","","the header of the updated <code>Document</code>",20,null],[3,"Executed","pliantdb_core::transaction","details about an executed transaction",null,null],[12,"id","","the id of the transaction",21,null],[12,"changed_documents","","a list of containing ids of <code>Documents</code> changed",21,null],[11,"to_owned","","convert this structure to be free of borrows",21,[[],["executed",3]]],[3,"ChangedDocument","","a record of a changed",null,null],[12,"collection","","the id of the <code>Collection</code> of the changed <code>Document</code>",22,null],[12,"id","","the id of the changed <code>Document</code>",22,null],[0,"test_util","pliantdb_core","Shared schemas and utilities used for unit testing.",null,null],[3,"BasicCollection","pliantdb_core::test_util","",null,null],[3,"BasicCount","","",null,null],[3,"Basic","","",null,null],[12,"value","","",23,null],[12,"parent_id","","",23,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",24,null],[11,"new","","",24,[[["path",3],["asref",8]]]],[4,"Error","pliantdb_core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",25,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",25,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",25,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",25,null],[11,"from","pliantdb_core::connection","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","pliantdb_core::document","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::collection","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","pliantdb_core::schema","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view::map","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","pliantdb_core::transaction","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","pliantdb_core::test_util","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","pliantdb_core","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"id","pliantdb_core::test_util","",27,[[],["id",3]]],[11,"define_views","","",27,[[["schema",3]]]],[11,"define_collections","","",29,[[["schema",3]]]],[11,"version","","",28,[[]]],[11,"name","","",28,[[],["cow",4]]],[11,"map","","",28,[[["document",3]],["mapresult",6]]],[11,"reduce","","",28,[[],[["error",4],["result",4]]]],[11,"drop","","",24,[[]]],[11,"as_ref","pliantdb_core::schema::view","",12,[[]]],[11,"as_ref","pliantdb_core::test_util","",24,[[],["path",3]]],[11,"from","pliantdb_core::schema::collection","",5,[[]]],[11,"from","","",5,[[["string",3]]]],[11,"from","pliantdb_core::schema::view","",10,[[["error",3]]]],[11,"from","","",12,[[],["serializablevalue",4]]],[11,"from","pliantdb_core","",25,[[["error",3]]]],[11,"clone","pliantdb_core::document","",2,[[],["revision",3]]],[11,"clone","","",3,[[],["header",3]]],[11,"clone","pliantdb_core::schema::collection","",5,[[],["id",3]]],[11,"clone","pliantdb_core::transaction","",22,[[],["changeddocument",3]]],[11,"default","pliantdb_core::schema","",26,[[],["schema",3]]],[11,"default","pliantdb_core::transaction","",14,[[],["transaction",3]]],[11,"default","pliantdb_core::test_util","",23,[[],["basic",3]]],[11,"eq","pliantdb_core::document","",2,[[["revision",3]]]],[11,"ne","","",2,[[["revision",3]]]],[11,"eq","","",3,[[["header",3]]]],[11,"ne","","",3,[[["header",3]]]],[11,"eq","pliantdb_core::schema::collection","",5,[[["id",3]]]],[11,"ne","","",5,[[["id",3]]]],[11,"eq","pliantdb_core::schema::view::map","",7,[[["map",3]]]],[11,"ne","","",7,[[["map",3]]]],[11,"eq","pliantdb_core::test_util","",23,[[["basic",3]]]],[11,"ne","","",23,[[["basic",3]]]],[11,"fmt","pliantdb_core::document","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view::map","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",10,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::transaction","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",25,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::test_util","",23,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",10,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",25,[[["formatter",3]],["result",6]]],[11,"source","pliantdb_core::schema::view","",10,[[],[["error",8],["option",4]]]],[11,"serialize","pliantdb_core::document","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::collection","",5,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::view::map","",8,[[],["result",4]]],[11,"serialize","pliantdb_core::transaction","",16,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","pliantdb_core::test_util","",23,[[],["result",4]]],[11,"deserialize","pliantdb_core::document","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::collection","",5,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::view::map","",8,[[],["result",4]]],[11,"deserialize","pliantdb_core::transaction","",16,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","pliantdb_core::test_util","",23,[[],["result",4]]],[11,"new","pliantdb_core::document","creates the first revision for a document with the SHA256 …",2,[[]]],[11,"next_revision","","creates the next revision in sequence with an updated …",2,[[],["option",4]]],[11,"define_collection","pliantdb_core::schema","adds the collection <code>C</code> and its views",26,[[]]],[11,"define_view","","adds the view <code>V</code>",26,[[]]],[11,"contains","","returns true if this schema contains the collection <code>C</code>",26,[[]]]],"p":[[8,"Connection"],[3,"Collection"],[3,"Revision"],[3,"Header"],[3,"Document"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[3,"Basic"],[3,"TestDirectory"],[4,"Error"],[3,"Schema"],[3,"BasicCollection"],[3,"BasicCount"],[3,"BasicDatabase"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
var searchIndex = JSON.parse('{\
"pliantdb":{"doc":"A programmable document database inspired by <code>CouchDB</code> …","i":[[0,"connection","pliantdb::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb::core::connection","Defines all interactions with a <code>Database</code>, regardless of …",null,null],[10,"collection","","Accesses a collection for the connected <code>Database</code>.",0,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected …",0,[[["global",3],["vec",3]],[["box",3],["pin",3]]]],[10,"update","","Updates an existing document in the connected <code>Database</code> …",0,[[["document",3]],[["pin",3],["box",3]]]],[10,"get","","Retrieves a stored document from collection <code>C</code> identified …",0,[[],[["box",3],["pin",3]]]],[10,"apply_transaction","","Applies a transaction to the database. If any operation …",0,[[["transaction",3]],[["pin",3],["box",3]]]],[10,"list_executed_transactions","","Lists executed transactions from this database. By …",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[0,"document","pliantdb::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",1,null],[12,"revision","","The revision of the stored document.",1,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",2,null],[12,"header","","The header of the document, which contains the id and …",2,null],[12,"contents","","The serialized bytes of the stored item.",2,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",3,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",3,null],[0,"schema","pliantdb::core","Types for defining database schema.",null,null],[0,"collection","pliantdb::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[0,"view","pliantdb::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",7,null],[12,"key","","The key used to index the View.",7,null],[12,"value","","An associated value stored in the view.",7,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[4,"Error","pliantdb::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Map","pliantdb::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",12,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[0,"transaction","pliantdb::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",13,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",14,null],[12,"command","","The command being performed.",14,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",15,null],[12,"contents","pliantdb::core::transaction::Command","The initial contents of the document.",16,null],[13,"Update","pliantdb::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",15,null],[12,"header","pliantdb::core::transaction::Command","The current header of the <code>Document</code>.",17,null],[12,"contents","","The new contents to store within the <code>Document</code>.",17,null],[4,"OperationResult","pliantdb::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",18,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",18,null],[12,"collection","pliantdb::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",19,null],[12,"header","","The header of the updated <code>Document</code>.",19,null],[3,"Executed","pliantdb::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",20,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",20,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",21,null],[12,"id","","The id of the changed <code>Document</code>.",21,null],[4,"Error","pliantdb::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",22,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",22,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",22,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",22,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"BasicCollection","pliantdb::core::test_util","",null,null],[3,"BasicCount","","",null,null],[3,"Basic","","",null,null],[12,"value","","",23,null],[12,"parent_id","","",23,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",24,null],[4,"Error","pliantdb::local","Errors that can occur from interacting with storage.",null,null],[13,"Sled","","An error occurred interacting with <code>sled</code>.",25,null],[13,"InternalSerialization","","An error occurred serializing the underlying database …",25,null],[13,"Serialization","","An error occurred serializing the contents of a <code>Document</code> …",25,null],[3,"Storage","","A local, file-based database.",null,null],[17,"LIST_TRANSACTIONS_DEFAULT_RESULT_COUNT","","If no <code>result_limit</code> is specified, this value is the limit …",null,null],[17,"LIST_TRANSACTIONS_MAX_RESULTS","","The maximum number of results allowed to be returned from …",null,null],[0,"connection","pliantdb::local::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb::local::core::connection","Defines all interactions with a <code>Database</code>, regardless of …",null,null],[10,"collection","","Accesses a collection for the connected <code>Database</code>.",0,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","Inserts a newly created document into the connected …",0,[[["global",3],["vec",3]],[["box",3],["pin",3]]]],[10,"update","","Updates an existing document in the connected <code>Database</code> …",0,[[["document",3]],[["pin",3],["box",3]]]],[10,"get","","Retrieves a stored document from collection <code>C</code> identified …",0,[[],[["box",3],["pin",3]]]],[10,"apply_transaction","","Applies a transaction to the database. If any operation …",0,[[["transaction",3]],[["pin",3],["box",3]]]],[10,"list_executed_transactions","","Lists executed transactions from this database. By …",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[0,"document","pliantdb::local::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb::local::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",1,null],[12,"revision","","The revision of the stored document.",1,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",2,null],[12,"header","","The header of the document, which contains the id and …",2,null],[12,"contents","","The serialized bytes of the stored item.",2,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",3,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",3,null],[0,"schema","pliantdb::local::core","Types for defining database schema.",null,null],[0,"collection","pliantdb::local::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb::local::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[0,"view","pliantdb::local::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb::local::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb::local::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",7,null],[12,"key","","The key used to index the View.",7,null],[12,"value","","An associated value stored in the view.",7,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[4,"Error","pliantdb::local::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Map","pliantdb::local::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",12,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[0,"transaction","pliantdb::local::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb::local::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",13,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",14,null],[12,"command","","The command being performed.",14,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",15,null],[12,"contents","pliantdb::local::core::transaction::Command","The initial contents of the document.",16,null],[13,"Update","pliantdb::local::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",15,null],[12,"header","pliantdb::local::core::transaction::Command","The current header of the <code>Document</code>.",17,null],[12,"contents","","The new contents to store within the <code>Document</code>.",17,null],[4,"OperationResult","pliantdb::local::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",18,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",18,null],[12,"collection","pliantdb::local::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",19,null],[12,"header","","The header of the updated <code>Document</code>.",19,null],[3,"Executed","pliantdb::local::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",20,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",20,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",21,null],[12,"id","","The id of the changed <code>Document</code>.",21,null],[4,"Error","pliantdb::local::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",22,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",22,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",22,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",22,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"BasicCollection","pliantdb::local::core::test_util","",null,null],[3,"BasicCount","","",null,null],[3,"Basic","","",null,null],[12,"value","","",23,null],[12,"parent_id","","",23,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",24,null],[11,"from","pliantdb::local::core::connection","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","pliantdb::local::core::document","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","pliantdb::local::core::schema","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","pliantdb::local::core::schema::view::map","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","pliantdb::local::core::schema","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","pliantdb::local::core::transaction","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","pliantdb::local::core","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","pliantdb::local::core::test_util","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"define_collections","","",28,[[["schema",3]]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","pliantdb::local","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"fmt","pliantdb::local::core::schema","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"define_collections","pliantdb::local::core::test_util","",30,[[["schema",3]]]],[11,"from","pliantdb::local::core::schema","",9,[[["error",3]],["error",4]]],[11,"from","","",11,[[],["serializablevalue",4]]],[11,"from","","",4,[[["string",3]],["id",3]]],[11,"from","","",4,[[],["id",3]]],[11,"from","pliantdb::local::core","",22,[[["error",3]],["error",4]]],[11,"id","pliantdb::local::core::test_util","",28,[[],["id",3]]],[11,"define_views","","",28,[[["schema",3]]]],[11,"default","pliantdb::local::core::schema","",27,[[],["schema",3]]],[11,"default","pliantdb::local::core::transaction","",13,[[],["transaction",3]]],[11,"default","pliantdb::local::core::test_util","",23,[[],["basic",3]]],[11,"deserialize","","",23,[[],[["result",4],["basic",3]]]],[11,"deserialize","pliantdb::local::core::schema::view::map","",7,[[],[["serialized",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::document","",2,[[],[["document",3],["result",4]]]],[11,"deserialize","pliantdb::local::core::schema","",4,[[],[["result",4],["id",3]]]],[11,"deserialize","pliantdb::local::core::document","",1,[[],[["result",4],["header",3]]]],[11,"deserialize","pliantdb::local::core::transaction","",20,[[],[["result",4],["executed",3]]]],[11,"deserialize","","",21,[[],[["result",4],["changeddocument",3]]]],[11,"deserialize","","",15,[[],[["result",4],["command",4]]]],[11,"deserialize","","",18,[[],[["result",4],["operationresult",4]]]],[11,"deserialize","pliantdb::local::core::document","",3,[[],[["result",4],["revision",3]]]],[11,"as_ref","pliantdb::local::core::test_util","",24,[[],["path",3]]],[11,"as_ref","pliantdb::local::core::schema","",11,[[]]],[11,"source","","",9,[[],[["error",8],["option",4]]]],[11,"clone","","",4,[[],["id",3]]],[11,"clone","pliantdb::local::core::transaction","",21,[[],["changeddocument",3]]],[11,"clone","pliantdb::local::core::document","",3,[[],["revision",3]]],[11,"clone","","",1,[[],["header",3]]],[11,"eq","","",3,[[["revision",3]]]],[11,"ne","","",3,[[["revision",3]]]],[11,"eq","","",1,[[["header",3]]]],[11,"ne","","",1,[[["header",3]]]],[11,"eq","pliantdb::local::core::schema","",4,[[["id",3]]]],[11,"ne","","",4,[[["id",3]]]],[11,"eq","pliantdb::local::core::test_util","",23,[[["basic",3]]]],[11,"ne","","",23,[[["basic",3]]]],[11,"eq","pliantdb::local::core::schema","",6,[[["map",3]]]],[11,"ne","","",6,[[["map",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema::view::map","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::schema","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::document","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::test_util","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb::local::core::transaction","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"version","pliantdb::local::core::test_util","",29,[[]]],[11,"name","","",29,[[],["cow",4]]],[11,"map","","",29,[[["document",3]],[["option",4],["error",4],["result",4]]]],[11,"reduce","","",29,[[],[["result",4],["error",4]]]],[11,"serialize","pliantdb::local::core::document","",2,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",21,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","pliantdb::local::core::schema::view::map","",7,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",20,[[],["result",4]]],[11,"serialize","pliantdb::local::core::document","",3,[[],["result",4]]],[11,"serialize","pliantdb::local::core::transaction","",15,[[],["result",4]]],[11,"serialize","pliantdb::local::core::schema","",4,[[],["result",4]]],[11,"serialize","pliantdb::local::core::test_util","",23,[[],["result",4]]],[11,"serialize","pliantdb::local::core::document","",1,[[],["result",4]]],[11,"drop","pliantdb::local::core::test_util","",24,[[]]],[11,"fmt","pliantdb::local","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"into","","",25,[[],["error",4]]],[11,"clone","","",31,[[],["storage",3]]],[11,"from","","",25,[[["error",4]],["error",4]]],[11,"from","","",25,[[["box",3],["global",3],["errorkind",4]],["error",4]]],[11,"from","","",25,[[["error",3]],["error",4]]],[11,"fmt","","",25,[[["formatter",3]],[["result",4],["error",3]]]],[11,"collection","","",31,[[],[["result",4],["collection",3],["error",4]]]],[11,"insert","","",31,[[["global",3],["vec",3]],[["box",3],["pin",3]]]],[11,"update","","",31,[[["document",3]],[["pin",3],["box",3]]]],[11,"apply_transaction","","",31,[[["transaction",3]],[["pin",3],["box",3]]]],[11,"get","","",31,[[],[["box",3],["pin",3]]]],[11,"list_executed_transactions","","",31,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[11,"source","","",25,[[],[["error",8],["option",4]]]],[11,"new","pliantdb::local::core::connection","Creates a new instance using <code>connection</code>.",26,[[],["collection",3]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",26,[[]]],[11,"update","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",26,[[["document",3]]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",26,[[]]],[11,"new","pliantdb::local::core::document","Creates a new document with <code>contents</code>.",2,[[["cow",4],["id",3]],["document",3]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",2,[[["id",3]],[["result",4],["error",3],["document",3]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",2,[[],[["error",3],["result",4]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",2,[[],[["result",4],["error",3]]]],[11,"create_new_revision","","Creates a new revision.",2,[[["cow",4]],[["document",3],["option",4]]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",2,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",2,[[],["map",3]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",2,[[],["map",3]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",2,[[],["map",3]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",2,[[],["document",3]]],[11,"new","","Creates the first revision for a document with the SHA256 …",3,[[],["revision",3]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",3,[[],[["option",4],["revision",3]]]],[11,"new","pliantdb::local::core::schema","Creates a new Map entry for the document with id <code>source</code>.",6,[[],["map",3]]],[11,"define_collection","","Adds the collection <code>C</code> and its views.",27,[[]]],[11,"define_view","","Adds the view <code>V</code>.",27,[[]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",27,[[]]],[11,"push","pliantdb::local::core::transaction","Adds an operation to the transaction.",13,[[["operation",3]]]],[11,"to_owned","","Convert this structure to be free of borrows.",20,[[],["executed",3]]],[11,"new","pliantdb::local::core::test_util","",24,[[],["testdirectory",3]]],[11,"open_local","pliantdb::local","Opens a local file as a pliantdb.",31,[[],[["result",4],["storage",3],["error",4]]]]],"p":[[8,"Connection"],[3,"Header"],[3,"Document"],[3,"Revision"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[4,"Error"],[3,"Basic"],[3,"TestDirectory"],[4,"Error"],[3,"Collection"],[3,"Schema"],[3,"BasicCollection"],[3,"BasicCount"],[3,"BasicDatabase"],[3,"Storage"]]},\
"pliantdb_core":{"doc":"Core functionality and types for <code>PliantDB</code>.","i":[[0,"connection","pliantdb_core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb_core::connection","Defines all interactions with a <code>Database</code>, regardless of …",null,null],[10,"collection","","Accesses a collection for the connected <code>Database</code>.",0,[[],[["result",4],["error",4],["collection",3]]]],[10,"insert","","Inserts a newly created document into the connected …",0,[[["vec",3]],[["box",3],["pin",3]]]],[10,"update","","Updates an existing document in the connected <code>Database</code> …",0,[[["document",3]],[["box",3],["pin",3]]]],[10,"get","","Retrieves a stored document from collection <code>C</code> identified …",0,[[],[["box",3],["pin",3]]]],[10,"apply_transaction","","Applies a transaction to the database. If any operation …",0,[[["transaction",3]],[["box",3],["pin",3]]]],[10,"list_executed_transactions","","Lists executed transactions from this database. By …",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[11,"new","","Creates a new instance using <code>connection</code>.",1,[[]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",1,[[]]],[11,"update","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",1,[[["document",3]]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",1,[[]]],[0,"document","pliantdb_core","Types for interacting with <code>Document</code>s.",null,null],[3,"Revision","pliantdb_core::document","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",2,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",2,null],[3,"Header","","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",3,null],[12,"revision","","The revision of the stored document.",3,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",4,null],[12,"header","","The header of the document, which contains the id and …",4,null],[12,"contents","","The serialized bytes of the stored item.",4,null],[11,"new","","Creates a new document with <code>contents</code>.",4,[[["id",3],["cow",4]]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",4,[[["id",3]],[["result",4],["error",3]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",4,[[],[["deserialize",8],["error",3],["result",4]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",4,[[],[["error",3],["result",4]]]],[11,"create_new_revision","","Creates a new revision.",4,[[["cow",4]],["option",4]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",4,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",4,[[["key",8]],[["map",3],["key",8]]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",4,[[["serialize",8]],[["serialize",8],["map",3]]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",4,[[["key",8],["serialize",8]],[["key",8],["map",3],["serialize",8]]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",4,[[],["document",3]]],[0,"schema","pliantdb_core","Types for defining database schema.",null,null],[0,"collection","pliantdb_core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb_core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",5,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",6,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",6,[[["schema",3]]]],[0,"view","pliantdb_core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb_core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb_core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",7,null],[12,"key","","The key used to index the View.",7,null],[12,"value","","An associated value stored in the view.",7,null],[11,"new","","Creates a new Map entry for the document with id <code>source</code>.",7,[[]]],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",8,null],[12,"key","","The key used to index the View.",8,null],[12,"value","","An associated value stored in the view.",8,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",9,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",9,[[]]],[4,"Error","pliantdb_core::schema::view","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",10,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",10,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",11,null],[16,"MapValue","","An associated type that can be stored with each entry in …",11,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",11,null],[10,"version","","The version of the view. Changing this value will cause …",11,[[]]],[10,"name","","The name of the view. Must be unique per collection.",11,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",11,[[["document",3]],["mapresult",6]]],[11,"reduce","","The reduce function for this view. If …",11,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",12,null],[13,"Borrowed","","a borrowed value",12,null],[8,"Database","pliantdb_core::schema","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",13,[[["schema",3]]]],[3,"Schema","","A collection of defined collections and views.",null,null],[0,"transaction","pliantdb_core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb_core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",14,null],[11,"push","","Adds an operation to the transaction.",14,[[["operation",3]]]],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",15,null],[12,"command","","The command being performed.",15,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",16,null],[12,"contents","pliantdb_core::transaction::Command","The initial contents of the document.",17,null],[13,"Update","pliantdb_core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",16,null],[12,"header","pliantdb_core::transaction::Command","The current header of the <code>Document</code>.",18,null],[12,"contents","","The new contents to store within the <code>Document</code>.",18,null],[4,"OperationResult","pliantdb_core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",19,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",19,null],[12,"collection","pliantdb_core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",20,null],[12,"header","","The header of the updated <code>Document</code>.",20,null],[3,"Executed","pliantdb_core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",21,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",21,null],[11,"to_owned","","Convert this structure to be free of borrows.",21,[[],["executed",3]]],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",22,null],[12,"id","","The id of the changed <code>Document</code>.",22,null],[0,"test_util","pliantdb_core","Shared schemas and utilities used for unit testing.",null,null],[3,"BasicCollection","pliantdb_core::test_util","",null,null],[3,"BasicCount","","",null,null],[3,"Basic","","",null,null],[12,"value","","",23,null],[12,"parent_id","","",23,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",24,null],[11,"new","","",24,[[["asref",8],["path",3]]]],[4,"Error","pliantdb_core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",25,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",25,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",25,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",25,null],[11,"from","pliantdb_core::connection","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","pliantdb_core::document","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::collection","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","pliantdb_core::schema","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view::map","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","pliantdb_core::schema::view","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","pliantdb_core::transaction","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","pliantdb_core::test_util","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","pliantdb_core","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"id","pliantdb_core::test_util","",27,[[],["id",3]]],[11,"define_views","","",27,[[["schema",3]]]],[11,"define_collections","","",29,[[["schema",3]]]],[11,"version","","",28,[[]]],[11,"name","","",28,[[],["cow",4]]],[11,"map","","",28,[[["document",3]],["mapresult",6]]],[11,"reduce","","",28,[[],[["error",4],["result",4]]]],[11,"drop","","",24,[[]]],[11,"as_ref","pliantdb_core::schema::view","",12,[[]]],[11,"as_ref","pliantdb_core::test_util","",24,[[],["path",3]]],[11,"from","pliantdb_core::schema::collection","",5,[[]]],[11,"from","","",5,[[["string",3]]]],[11,"from","pliantdb_core::schema::view","",10,[[["error",3]]]],[11,"from","","",12,[[],["serializablevalue",4]]],[11,"from","pliantdb_core","",25,[[["error",3]]]],[11,"clone","pliantdb_core::document","",2,[[],["revision",3]]],[11,"clone","","",3,[[],["header",3]]],[11,"clone","pliantdb_core::schema::collection","",5,[[],["id",3]]],[11,"clone","pliantdb_core::transaction","",22,[[],["changeddocument",3]]],[11,"default","pliantdb_core::schema","",26,[[],["schema",3]]],[11,"default","pliantdb_core::transaction","",14,[[],["transaction",3]]],[11,"default","pliantdb_core::test_util","",23,[[],["basic",3]]],[11,"eq","pliantdb_core::document","",2,[[["revision",3]]]],[11,"ne","","",2,[[["revision",3]]]],[11,"eq","","",3,[[["header",3]]]],[11,"ne","","",3,[[["header",3]]]],[11,"eq","pliantdb_core::schema::collection","",5,[[["id",3]]]],[11,"ne","","",5,[[["id",3]]]],[11,"eq","pliantdb_core::schema::view::map","",7,[[["map",3]]]],[11,"ne","","",7,[[["map",3]]]],[11,"eq","pliantdb_core::test_util","",23,[[["basic",3]]]],[11,"ne","","",23,[[["basic",3]]]],[11,"fmt","pliantdb_core::document","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view::map","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",10,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::transaction","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",25,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::test_util","",23,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::collection","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core::schema::view","",10,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb_core","",25,[[["formatter",3]],["result",6]]],[11,"source","pliantdb_core::schema::view","",10,[[],[["option",4],["error",8]]]],[11,"serialize","pliantdb_core::document","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::collection","",5,[[],["result",4]]],[11,"serialize","pliantdb_core::schema::view::map","",8,[[],["result",4]]],[11,"serialize","pliantdb_core::transaction","",16,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","pliantdb_core::test_util","",23,[[],["result",4]]],[11,"deserialize","pliantdb_core::document","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::collection","",5,[[],["result",4]]],[11,"deserialize","pliantdb_core::schema::view::map","",8,[[],["result",4]]],[11,"deserialize","pliantdb_core::transaction","",16,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","pliantdb_core::test_util","",23,[[],["result",4]]],[11,"new","pliantdb_core::document","Creates the first revision for a document with the SHA256 …",2,[[]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",2,[[],["option",4]]],[11,"define_collection","pliantdb_core::schema","Adds the collection <code>C</code> and its views.",26,[[]]],[11,"define_view","","Adds the view <code>V</code>.",26,[[]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",26,[[]]]],"p":[[8,"Connection"],[3,"Collection"],[3,"Revision"],[3,"Header"],[3,"Document"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[3,"Basic"],[3,"TestDirectory"],[4,"Error"],[3,"Schema"],[3,"BasicCollection"],[3,"BasicCount"],[3,"BasicDatabase"]]},\
"pliantdb_local":{"doc":"Local storage backend for <code>PliantDB</code>.","i":[[0,"connection","pliantdb_local::core","Types for interacting with a database.",null,null],[8,"Connection","pliantdb_local::core::connection","Defines all interactions with a <code>Database</code>, regardless of …",null,null],[10,"collection","","Accesses a collection for the connected <code>Database</code>.",0,[[],[["error",4],["result",4],["collection",3]]]],[10,"insert","","Inserts a newly created document into the connected …",0,[[["vec",3],["global",3]],[["pin",3],["box",3]]]],[10,"update","","Updates an existing document in the connected <code>Database</code> …",0,[[["document",3]],[["box",3],["pin",3]]]],[10,"get","","Retrieves a stored document from collection <code>C</code> identified …",0,[[],[["pin",3],["box",3]]]],[10,"apply_transaction","","Applies a transaction to the database. If any operation …",0,[[["transaction",3]],[["box",3],["pin",3]]]],[10,"list_executed_transactions","","Lists executed transactions from this database. By …",0,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[3,"Collection","","Interacts with a collection over a <code>Connection</code>.",null,null],[0,"document","pliantdb_local::core","Types for interacting with <code>Document</code>s.",null,null],[3,"Header","pliantdb_local::core::document","The header of a <code>Document</code>.",null,null],[12,"id","","The id of the Document. Unique across the collection <code>C</code>",1,null],[12,"revision","","The revision of the stored document.",1,null],[3,"Document","","Contains a serialized document in the database.",null,null],[12,"collection","","The <code>Id</code> of the <code>Collection</code> this document belongs to.",2,null],[12,"header","","The header of the document, which contains the id and …",2,null],[12,"contents","","The serialized bytes of the stored item.",2,null],[3,"Revision","","Information about a <code>Document</code>\'s revision history.",null,null],[12,"id","","The current revision id of the document. This value is …",3,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",3,null],[0,"schema","pliantdb_local::core","Types for defining database schema.",null,null],[0,"collection","pliantdb_local::core::schema","Types for defining a <code>Collection</code>.",null,null],[3,"Id","pliantdb_local::core::schema::collection","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[0,"view","pliantdb_local::core::schema","Types for defining map/reduce-powered <code>View</code>s.",null,null],[0,"map","pliantdb_local::core::schema::view","Types for defining a <code>Map</code> within a <code>View</code>.",null,null],[3,"Map","pliantdb_local::core::schema::view::map","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Serialized","","Represents a document\'s entry in a View\'s mappings, …",null,null],[12,"source","","The id of the document that emitted this entry.",7,null],[12,"key","","The key used to index the View.",7,null],[12,"value","","An associated value stored in the view.",7,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[4,"Error","pliantdb_local::core::schema::view","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[3,"Map","","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Map","pliantdb_local::core::schema","A document\'s entry in a View\'s mappings.",null,null],[12,"source","","The id of the document that emitted this entry.",6,null],[12,"key","","The key used to index the View.",6,null],[12,"value","","An associated value stored in the view.",6,null],[3,"Schema","","A collection of defined collections and views.",null,null],[8,"View","","A map/reduce powered indexing and aggregation schema.",null,null],[16,"MapKey","","The key for this view.",10,null],[16,"MapValue","","An associated type that can be stored with each entry in …",10,null],[16,"Reduce","","When implementing reduce(), this is the returned type.",10,null],[10,"version","","The version of the view. Changing this value will cause …",10,[[]]],[10,"name","","The name of the view. Must be unique per collection.",10,[[],["cow",4]]],[10,"map","","The map function for this view. This function is …",10,[[["document",3]],[["error",4],["result",4],["option",4]]]],[11,"reduce","","The reduce function for this view. If …",10,[[],[["error",4],["result",4]]]],[8,"Collection","","A namespaced collection of <code>Document<Self></code> items and views.",null,null],[10,"id","","The <code>Id</code> of this collection.",5,[[],["id",3]]],[10,"define_views","","Defines all <code>View</code>s in this collection in <code>schema</code>.",5,[[["schema",3]]]],[8,"Database","","Defines a group of collections that are stored into a …",null,null],[10,"define_collections","","Defines the <code>Collection</code>s into <code>schema</code>",12,[[["schema",3]]]],[8,"Key","","A trait that enables a type to convert itself to a …",null,null],[10,"into_big_endian_bytes","","Convert <code>self</code> into an <code>IVec</code> containing bytes ordered in …",8,[[],["cow",4]]],[10,"from_big_endian_bytes","","Convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",8,[[]]],[6,"MapResult","","A type alias for the result of <code>View::map()</code>.",null,null],[4,"SerializableValue","","Represents either an owned value or a borrowed value. …",null,null],[13,"Owned","","an owned value",11,null],[13,"Borrowed","","a borrowed value",11,null],[3,"Id","","A unique collection id. Choose collection names that …",null,null],[12,"0","","",4,null],[4,"Error","","Errors that arise when interacting with views.",null,null],[13,"SerializationError","","An error occurred while serializing or deserializing.",9,null],[13,"ReduceUnimplemented","","Returned when the reduce() function is unimplemented.",9,null],[0,"transaction","pliantdb_local::core","Types for executing transactions.",null,null],[3,"Transaction","pliantdb_local::core::transaction","A list of operations to execute as a single unit. If any …",null,null],[12,"operations","","The operations in this transaction.",13,null],[3,"Operation","","A single operation performed on a <code>Collection</code>.",null,null],[12,"collection","","The id of the <code>Collection</code>.",14,null],[12,"command","","The command being performed.",14,null],[4,"Command","","A command to execute within a <code>Collection</code>.",null,null],[13,"Insert","","Inserts a new document containing <code>contents</code>.",15,null],[12,"contents","pliantdb_local::core::transaction::Command","The initial contents of the document.",16,null],[13,"Update","pliantdb_local::core::transaction","Update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",15,null],[12,"header","pliantdb_local::core::transaction::Command","The current header of the <code>Document</code>.",17,null],[12,"contents","","The new contents to store within the <code>Document</code>.",17,null],[4,"OperationResult","pliantdb_local::core::transaction","Information about the result of each <code>Operation</code> in a …",null,null],[13,"Success","","An operation succeeded but had no information to output.",18,null],[13,"DocumentUpdated","","A <code>Document</code> was updated.",18,null],[12,"collection","pliantdb_local::core::transaction::OperationResult","The id of the <code>Collection</code> of the updated <code>Document</code>.",19,null],[12,"header","","The header of the updated <code>Document</code>.",19,null],[3,"Executed","pliantdb_local::core::transaction","Details about an executed transaction.",null,null],[12,"id","","The id of the transaction.",20,null],[12,"changed_documents","","A list of containing ids of <code>Documents</code> changed.",20,null],[3,"ChangedDocument","","A record of a changed.",null,null],[12,"collection","","The id of the <code>Collection</code> of the changed <code>Document</code>.",21,null],[12,"id","","The id of the changed <code>Document</code>.",21,null],[4,"Error","pliantdb_local::core","an enumeration of errors that this crate can produce",null,null],[13,"Storage","","An error from serializing or deserializing from a <code>Document</code>…",22,null],[13,"CollectionNotFound","","An attempt to use a <code>Collection</code> with a <code>Database</code> that it …",22,null],[13,"DocumentNotFound","","An attempt to update a document that doesn\'t exist.",22,null],[13,"DocumentConflict","","When updating a document, if a situation is detected …",22,null],[0,"test_util","","Shared schemas and utilities used for unit testing.",null,null],[3,"BasicCollection","pliantdb_local::core::test_util","",null,null],[3,"BasicCount","","",null,null],[3,"Basic","","",null,null],[12,"value","","",23,null],[12,"parent_id","","",23,null],[3,"BasicDatabase","","",null,null],[3,"TestDirectory","","",null,null],[12,"0","","",24,null],[4,"Error","pliantdb_local","Errors that can occur from interacting with storage.",null,null],[13,"Sled","","An error occurred interacting with <code>sled</code>.",25,null],[13,"InternalSerialization","","An error occurred serializing the underlying database …",25,null],[13,"Serialization","","An error occurred serializing the contents of a <code>Document</code> …",25,null],[3,"Storage","","A local, file-based database.",null,null],[17,"LIST_TRANSACTIONS_DEFAULT_RESULT_COUNT","","If no <code>result_limit</code> is specified, this value is the limit …",null,null],[17,"LIST_TRANSACTIONS_MAX_RESULTS","","The maximum number of results allowed to be returned from …",null,null],[11,"from","pliantdb_local::core::connection","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","pliantdb_local::core::document","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","pliantdb_local::core::schema","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","pliantdb_local::core::schema::view::map","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","pliantdb_local::core::schema","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","pliantdb_local::core::transaction","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","pliantdb_local::core","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","pliantdb_local::core::test_util","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"define_collections","","",28,[[["schema",3]]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","pliantdb_local","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"init","","",31,[[]]],[11,"deref","","",31,[[]]],[11,"deref_mut","","",31,[[]]],[11,"drop","","",31,[[]]],[11,"fmt","pliantdb_local::core::schema","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"define_collections","pliantdb_local::core::test_util","",30,[[["schema",3]]]],[11,"from","pliantdb_local::core::schema","",9,[[["error",3]],["error",4]]],[11,"from","","",11,[[],["serializablevalue",4]]],[11,"from","","",4,[[["string",3]],["id",3]]],[11,"from","","",4,[[],["id",3]]],[11,"from","pliantdb_local::core","",22,[[["error",3]],["error",4]]],[11,"id","pliantdb_local::core::test_util","",28,[[],["id",3]]],[11,"define_views","","",28,[[["schema",3]]]],[11,"default","pliantdb_local::core::schema","",27,[[],["schema",3]]],[11,"default","pliantdb_local::core::transaction","",13,[[],["transaction",3]]],[11,"default","pliantdb_local::core::test_util","",23,[[],["basic",3]]],[11,"deserialize","","",23,[[],[["basic",3],["result",4]]]],[11,"deserialize","pliantdb_local::core::schema::view::map","",7,[[],[["serialized",3],["result",4]]]],[11,"deserialize","pliantdb_local::core::document","",2,[[],[["document",3],["result",4]]]],[11,"deserialize","pliantdb_local::core::schema","",4,[[],[["id",3],["result",4]]]],[11,"deserialize","pliantdb_local::core::document","",1,[[],[["result",4],["header",3]]]],[11,"deserialize","pliantdb_local::core::transaction","",20,[[],[["result",4],["executed",3]]]],[11,"deserialize","","",21,[[],[["result",4],["changeddocument",3]]]],[11,"deserialize","","",15,[[],[["command",4],["result",4]]]],[11,"deserialize","","",18,[[],[["operationresult",4],["result",4]]]],[11,"deserialize","pliantdb_local::core::document","",3,[[],[["revision",3],["result",4]]]],[11,"as_ref","pliantdb_local::core::test_util","",24,[[],["path",3]]],[11,"as_ref","pliantdb_local::core::schema","",11,[[]]],[11,"source","","",9,[[],[["error",8],["option",4]]]],[11,"clone","","",4,[[],["id",3]]],[11,"clone","pliantdb_local::core::transaction","",21,[[],["changeddocument",3]]],[11,"clone","pliantdb_local::core::document","",3,[[],["revision",3]]],[11,"clone","","",1,[[],["header",3]]],[11,"eq","","",3,[[["revision",3]]]],[11,"ne","","",3,[[["revision",3]]]],[11,"eq","","",1,[[["header",3]]]],[11,"ne","","",1,[[["header",3]]]],[11,"eq","pliantdb_local::core::schema","",4,[[["id",3]]]],[11,"ne","","",4,[[["id",3]]]],[11,"eq","pliantdb_local::core::test_util","",23,[[["basic",3]]]],[11,"ne","","",23,[[["basic",3]]]],[11,"eq","pliantdb_local::core::schema","",6,[[["map",3]]]],[11,"ne","","",6,[[["map",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",15,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",2,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema::view::map","",7,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::schema","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::document","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::test_util","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","pliantdb_local::core::transaction","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"version","pliantdb_local::core::test_util","",29,[[]]],[11,"name","","",29,[[],["cow",4]]],[11,"map","","",29,[[["document",3]],[["error",4],["option",4],["result",4]]]],[11,"reduce","","",29,[[],[["error",4],["result",4]]]],[11,"serialize","pliantdb_local::core::document","",2,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",21,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","pliantdb_local::core::schema::view::map","",7,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",20,[[],["result",4]]],[11,"serialize","pliantdb_local::core::document","",3,[[],["result",4]]],[11,"serialize","pliantdb_local::core::transaction","",15,[[],["result",4]]],[11,"serialize","pliantdb_local::core::schema","",4,[[],["result",4]]],[11,"serialize","pliantdb_local::core::test_util","",23,[[],["result",4]]],[11,"serialize","pliantdb_local::core::document","",1,[[],["result",4]]],[11,"drop","pliantdb_local::core::test_util","",24,[[]]],[11,"from","pliantdb_local","",25,[[["error",4]]]],[11,"from","","",25,[[["error",6]]]],[11,"from","","",25,[[["error",3]]]],[11,"into","","",25,[[],["error",4]]],[11,"clone","","",31,[[],["storage",3]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"source","","",25,[[],[["error",8],["option",4]]]],[11,"collection","","",31,[[],[["result",4],["collection",3],["error",4]]]],[11,"insert","","",31,[[["vec",3]],[["box",3],["pin",3]]]],[11,"update","","",31,[[["document",3]],[["box",3],["pin",3]]]],[11,"apply_transaction","","",31,[[["transaction",3]],[["pin",3],["box",3]]]],[11,"get","","",31,[[],[["pin",3],["box",3]]]],[11,"list_executed_transactions","","",31,[[["option",4],["option",4]],[["pin",3],["box",3]]]],[11,"new","pliantdb_local::core::connection","Creates a new instance using <code>connection</code>.",26,[[],["collection",3]]],[11,"push","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",26,[[]]],[11,"update","","Adds a new <code>Document<Cl></code> with the contents <code>item</code>.",26,[[["document",3]]]],[11,"get","","Retrieves a <code>Document<Cl></code> with <code>id</code> from the connection.",26,[[]]],[11,"new","pliantdb_local::core::document","Creates a new document with <code>contents</code>.",2,[[["id",3],["cow",4]],["document",3]]],[11,"with_contents","","Creates a new document with serialized bytes from <code>contents</code>…",2,[[["id",3]],[["error",3],["document",3],["result",4]]]],[11,"contents","","Retrieves <code>contents</code> through deserialization into the type <code>D</code>…",2,[[],[["result",4],["error",3]]]],[11,"set_contents","","Serializes and stores <code>contents</code> into this document.",2,[[],[["result",4],["error",3]]]],[11,"create_new_revision","","Creates a new revision.",2,[[["cow",4]],[["option",4],["document",3]]]],[11,"emit","","Creates a <code>Map</code> result with an empty key and value.",2,[[],["map",3]]],[11,"emit_key","","Creates a <code>Map</code> result with a <code>key</code> and an empty value.",2,[[],["map",3]]],[11,"emit_value","","Creates a <code>Map</code> result with <code>value</code> and an empty key.",2,[[],["map",3]]],[11,"emit_key_and_value","","Creates a <code>Map</code> result with a <code>key</code> and <code>value</code>.",2,[[],["map",3]]],[11,"to_owned","","Clone the document\'s data so that it\'s no longer borrowed …",2,[[],["document",3]]],[11,"new","","Creates the first revision for a document with the SHA256 …",3,[[],["revision",3]]],[11,"next_revision","","Creates the next revision in sequence with an updated …",3,[[],[["revision",3],["option",4]]]],[11,"new","pliantdb_local::core::schema","Creates a new Map entry for the document with id <code>source</code>.",6,[[],["map",3]]],[11,"define_collection","","Adds the collection <code>C</code> and its views.",27,[[]]],[11,"define_view","","Adds the view <code>V</code>.",27,[[]]],[11,"contains","","Returns <code>true</code> if this schema contains the collection <code>C</code>.",27,[[]]],[11,"push","pliantdb_local::core::transaction","Adds an operation to the transaction.",13,[[["operation",3]]]],[11,"to_owned","","Convert this structure to be free of borrows.",20,[[],["executed",3]]],[11,"new","pliantdb_local::core::test_util","",24,[[],["testdirectory",3]]],[11,"open_local","pliantdb_local","Opens a local file as a pliantdb.",31,[[["path",3],["asref",8]],[["result",4],["error",4]]]]],"p":[[8,"Connection"],[3,"Header"],[3,"Document"],[3,"Revision"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[4,"OperationResult"],[13,"DocumentUpdated"],[3,"Executed"],[3,"ChangedDocument"],[4,"Error"],[3,"Basic"],[3,"TestDirectory"],[4,"Error"],[3,"Collection"],[3,"Schema"],[3,"BasicCollection"],[3,"BasicCount"],[3,"BasicDatabase"],[3,"Storage"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
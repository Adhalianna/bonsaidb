var searchIndex = JSON.parse('{\
"pliantdb":{"doc":"pliantdb (name not set in stone) is a programmable …","i":[[0,"connection","pliantdb","types for interacting with a database",null,null],[4,"Error","pliantdb::connection","an enumeration of errors that are <code>Connection</code>-related",null,null],[13,"Storage","","an error occurred interacting with the file-storage layer",0,null],[13,"CollectionNotFound","","an attempt to use a <code>Collection</code> with a <code>Database</code> that it …",0,null],[8,"Connection","","a trait that defines all interactions with a <code>Database</code>, …",null,null],[10,"collection","","access a collection for the connected <code>Database</code>",1,[[],[["result",4],["collection",3],["error",4]]]],[10,"insert","","insert a newly created document into the connected …",1,[[["vec",3]],[["box",3],["pin",3]]]],[10,"update","","update an existing document in the connected <code>Database</code> for …",1,[[["document",3]],[["box",3],["pin",3]]]],[3,"Collection","","a struct used to interact with a collection over a …",null,null],[11,"push","","add a new <code>Document<Cl></code> with the contents <code>item</code>",2,[[]]],[11,"get","","retrieve a <code>Document<Cl></code> with <code>id</code> from the connection",2,[[["uuid",3]]]],[0,"document","pliantdb","types for interacting with <code>Document</code>s",null,null],[3,"Revision","pliantdb::document","a struct containing information about a <code>Document</code>\'s …",null,null],[12,"id","","The current revision id of the document. This value is …",3,null],[12,"sha256","","The SHA256 digest of the bytes contained within the …",3,null],[3,"Header","","the header of a <code>Document</code>",null,null],[12,"id","","the id of the Document. Unique across the collection <code>C</code>",4,null],[12,"revision","","the revision of the stored document.",4,null],[3,"Document","","a struct representing a document in the database",null,null],[12,"header","","the header of the document, which contains the id and …",5,null],[12,"contents","","the serialized bytes of the stored item",5,null],[11,"new","","create a new document with serialized bytes from <code>contents</code>",5,[[],[["result",4],["error",3]]]],[11,"contents","","retrieves <code>contents</code> through deserialization into the type <code>D</code>",5,[[],[["deserialize",8],["result",4],["error",3]]]],[11,"emit","","create a <code>Map</code> result with an empty key and value",5,[[],["map",3]]],[11,"emit_key","","create a <code>Map</code> result with a <code>key</code> and an empty value",5,[[["key",8]],[["key",8],["map",3]]]],[11,"emit_value","","create a <code>Map</code> result with <code>value</code> and an empty key",5,[[["serialize",8]],[["map",3],["serialize",8]]]],[11,"emit_key_and_value","","create a <code>Map</code> result with a <code>key</code> and <code>value</code>",5,[[["key",8],["serialize",8]],[["map",3],["key",8],["serialize",8]]]],[0,"schema","pliantdb","types for defining database schema",null,null],[0,"collection","pliantdb::schema","types for defining a <code>Collection</code>",null,null],[3,"Id","pliantdb::schema::collection","a unique collection id. Choose collection names that …",null,null],[12,"0","","",6,null],[8,"Collection","","a namespaced collection of <code>Document<Self></code> items and views",null,null],[10,"id","","the <code>Id</code> of this collection",7,[[],["id",3]]],[10,"define_views","","implementors define all of their <code>View</code>s in <code>schema</code>",7,[[["schema",3]]]],[0,"view","pliantdb::schema","types for defining map/reduce-powered <code>View</code>s",null,null],[0,"map","pliantdb::schema::view","types for defining a <code>Map</code> within a <code>View</code>",null,null],[3,"Map","pliantdb::schema::view::map","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",8,null],[12,"key","","the key used to index the View",8,null],[12,"value","","an associated value stored in the view",8,null],[11,"new","","creates a new Map entry for the document with id <code>source</code>",8,[[["uuid",3]]]],[3,"Serialized","","a structure representing a document\'s entry in a View\'s …",null,null],[12,"source","","the id of the document that emitted this entry",9,null],[12,"key","","the key used to index the View",9,null],[12,"value","","an associated value stored in the view",9,null],[8,"Key","","a trait that enables a type to convert itself to a …",null,null],[10,"into_endian_bytes","","convert <code>self</code> into an <code>IVec</code> containing bytes ordered in a …",10,[[],["cow",4]]],[10,"from_endian_bytes","","convert a slice of bytes into <code>Self</code> by interpretting <code>bytes</code> …",10,[[]]],[4,"Error","pliantdb::schema::view","errors that arise when interacting with views",null,null],[13,"SerializationError","","an error occurred while serializing or deserializing",11,null],[13,"ReduceUnimplemented","","returned when",11,null],[6,"MapResult","","a type alias for the result of <code>View::map()</code>",null,null],[8,"View","","a map/reduce powered indexing and aggregation schema",null,null],[16,"MapKey","","the key for this view. If you\'re using ranged queries, …",12,null],[16,"MapValue","","an associated type that can be stored with each entry in …",12,null],[16,"Reduce","","when implementing reduce(), this is the returned type",12,null],[10,"version","","the version of the view. Changing this value will cause …",12,[[]]],[10,"name","","the name of the view. Must be unique per collection.",12,[[],["cow",4]]],[10,"map","","the map function for this view. This function is …",12,[[["document",3]],["mapresult",6]]],[11,"reduce","","the reduce function for this view. If …",12,[[],[["error",4],["result",4]]]],[4,"SerializableValue","","an enum representing either an owned value or a borrowed …",null,null],[13,"Owned","","an owned value",13,null],[13,"Borrowed","","a borrowed value",13,null],[8,"Database","pliantdb::schema","a trait that defines a group of collections that are …",null,null],[10,"define_collections","","implementors must define their <code>Collection</code>s in <code>schema</code>",14,[[["schema",3]]]],[3,"Schema","","a collection of defined collections and views",null,null],[0,"storage","pliantdb","types for interacting with a local, file-based database",null,null],[3,"Storage","pliantdb::storage","a local, file-based database",null,null],[11,"open_local","","opens a local file as a pliantdb",15,[[["path",3],["asref",8]],[["result",4],["error",4]]]],[0,"transaction","pliantdb","types for executing transactions",null,null],[3,"Transaction","pliantdb::transaction","a list of operations to execute as a single unit. If any …",null,null],[11,"push","","add an operation to the transaction",16,[[["operation",3]]]],[3,"Operation","","a single operation performed on a <code>Collection</code>",null,null],[12,"collection","","the id of the <code>Collection</code>",17,null],[12,"command","","the command being performed",17,null],[4,"Command","","a command to execute within a <code>Collection</code>",null,null],[13,"Insert","","insert a new document containing <code>contents</code>",18,null],[12,"contents","pliantdb::transaction::Command","the initial contents of the document",19,null],[13,"Update","pliantdb::transaction","update an existing <code>Document</code> identified by <code>id</code>. <code>revision</code> …",18,null],[12,"id","pliantdb::transaction::Command","the id of the <code>Document</code>",20,null],[12,"revision","","the current <code>Revision</code> of the <code>Document</code>",20,null],[12,"contents","","the new contents to store within the <code>Document</code>",20,null],[3,"Executed","pliantdb::transaction","details about an executed transaction",null,null],[12,"id","","the id of the transaction",21,null],[12,"changed_documents","","a list of containing ids of <code>Documents</code> changed",21,null],[3,"ChangedDocument","","a record of a changed",null,null],[12,"collection","","the id of the <code>Collection</code> of the changed <code>Document</code>",22,null],[12,"id","","the id of the changed <code>Document</code>",22,null],[4,"Error","pliantdb","an enumeration of errors that this crate can produce",null,null],[13,"Connection","","an error that occurred while interacting with a <code>Connection</code>",23,null],[13,"Serialization","","an error from serializing or deserializing from a <code>Document</code>",23,null],[11,"from","pliantdb::connection","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","pliantdb::document","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","pliantdb::schema::collection","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","pliantdb::schema","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","pliantdb::schema::view::map","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","pliantdb::schema::view","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","pliantdb::storage","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","pliantdb::transaction","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","pliantdb","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"collection","pliantdb::storage","",15,[[],[["result",4],["collection",3],["error",4]]]],[11,"insert","","",15,[[["vec",3]],[["box",3],["pin",3]]]],[11,"update","","",15,[[["document",3]],[["box",3],["pin",3]]]],[11,"as_ref","pliantdb::schema::view","",13,[[]]],[11,"from","pliantdb::connection","",0,[[["error",4]]]],[11,"from","pliantdb::schema::collection","",6,[[]]],[11,"from","","",6,[[["string",3]]]],[11,"from","pliantdb::schema::view","",11,[[["error",3]]]],[11,"from","","",13,[[],["serializablevalue",4]]],[11,"from","pliantdb","",23,[[["error",4]]]],[11,"from","","",23,[[["error",3]]]],[11,"from","","",23,[[["error",4]]]],[11,"clone","pliantdb::document","",3,[[],["revision",3]]],[11,"clone","","",4,[[],["header",3]]],[11,"clone","pliantdb::schema::collection","",6,[[],["id",3]]],[11,"clone","pliantdb::storage","",15,[[],["storage",3]]],[11,"clone","pliantdb::transaction","",22,[[],["changeddocument",3]]],[11,"default","pliantdb::schema","",24,[[],["schema",3]]],[11,"default","pliantdb::transaction","",16,[[],["transaction",3]]],[11,"eq","pliantdb::document","",3,[[["revision",3]]]],[11,"ne","","",3,[[["revision",3]]]],[11,"eq","pliantdb::schema::view::map","",8,[[["map",3]]]],[11,"ne","","",8,[[["map",3]]]],[11,"fmt","pliantdb::connection","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::document","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::collection","",6,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view::map","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view","",11,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::transaction","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb","",23,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::connection","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb::schema::view","",11,[[["formatter",3]],["result",6]]],[11,"fmt","pliantdb","",23,[[["formatter",3]],["result",6]]],[11,"source","pliantdb::connection","",0,[[],[["option",4],["error",8]]]],[11,"source","pliantdb::schema::view","",11,[[],[["option",4],["error",8]]]],[11,"source","pliantdb","",23,[[],[["option",4],["error",8]]]],[11,"serialize","pliantdb::document","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","pliantdb::schema::collection","",6,[[],["result",4]]],[11,"serialize","pliantdb::schema::view::map","",9,[[],["result",4]]],[11,"serialize","pliantdb::transaction","",18,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"deserialize","pliantdb::document","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","pliantdb::schema::collection","",6,[[],["result",4]]],[11,"deserialize","pliantdb::schema::view::map","",9,[[],["result",4]]],[11,"deserialize","pliantdb::transaction","",18,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"new","pliantdb::document","creates the first revision for a document with the SHA256 …",3,[[]]],[11,"next_revision","","creates the next revision in sequence with an updated …",3,[[],["option",4]]],[11,"define_collection","pliantdb::schema","adds the collection <code>C</code> and its views",24,[[]]],[11,"define_view","","adds the view <code>V</code>",24,[[]]],[11,"contains","","returns true if this schema contains the collection <code>C</code>",24,[[]]]],"p":[[4,"Error"],[8,"Connection"],[3,"Collection"],[3,"Revision"],[3,"Header"],[3,"Document"],[3,"Id"],[8,"Collection"],[3,"Map"],[3,"Serialized"],[8,"Key"],[4,"Error"],[8,"View"],[4,"SerializableValue"],[8,"Database"],[3,"Storage"],[3,"Transaction"],[3,"Operation"],[4,"Command"],[13,"Insert"],[13,"Update"],[3,"Executed"],[3,"ChangedDocument"],[4,"Error"],[3,"Schema"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);